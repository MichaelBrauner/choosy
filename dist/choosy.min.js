function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _possibleConstructorReturn(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?_assertThisInitialized(t):e}function _createSuper(n){var i=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(n);return _possibleConstructorReturn(this,i?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _classPrivateMethodGet(t,e,n){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return n}var classnames={widget:"choosy-widget",input:"choosy-input",list:"choosy-list",item:"choosy-item",item_text_span:"choosy-item-text-span",remove_button:"choosy-remove-button",remove_button_svg:"choosy-remove-button-svg",result_list_container:"choosy-result-list-container",result_list:"choosy-result-list",result_list_item:"choosy-result-item",result_list_item_active:"active",add_item:"choosy-add-item"},elements={get textInput(){var t=this.create("input","text",[classnames.input]);return t.style.width="1ch",t},get widget(){var t=this.create("div",null,[classnames.widget]);return t.append(this.list),t.append(this.resultList),t},get list(){return this.create("div",null,[classnames.list])},get removeButton(){var t=this.create("button",null,[classnames.remove_button]);return t.append(this.removeSVG),t},get removeSVG(){return(new DOMParser).parseFromString("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill=\"currentColor\" class=\"".concat(classnames.remove_button_svg,"\">\n            <path fill-rule='evenodd'\n                  d='M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z'></path>\n            </svg>"),"text/html").body.firstChild},get resultList(){var t=this.create("div",null,[classnames.result_list_container]);return t.style.display="none",t},get resultListList(){return this.create("ul",null,[classnames.result_list])},get resultItem(){return this.create("li",null,[classnames.result_list_item])},get addItem(){var t=this.resultItem;return t.classList.add(classnames.add_item),t.innerHTML="Add new",t},get selectOption(){return this.create("option",null)},getItem:function(t){var e=this.create("div",null,[classnames.item]);return e.append(this.getItemTextSpan(t)),e.append(this.removeButton),e},getItemTextSpan:function(t){var e=this.create("span",null,[classnames.item_text_span]);return e.innerHTML=t,e},create:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],i=document.createElement(t);return e&&(i.type=e),n.forEach(function(t){i.classList.add(t)}),i}},Component=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.$app=e}return _createClass(n,[{key:"$store",get:function(){return this.$app.store}},{key:"$navigation",get:function(){return this.$app.navigation}},{key:"$event",get:function(){return this.$app.event}},{key:"$option",get:function(){return this.$app.store.options}},{key:"$textInput",get:function(){return this.$app.widget.tagList.textInput}}]),n}(),InitialElement=function(){_inherits(i,Component);var n=_createSuper(i);function i(t,e){return _classCallCheck(this,i),(t=n.call(this,t,e)).storeInitialData(e),t.hide(),t.registerListeners(e),t}return _createClass(i,[{key:"hide",value:function(){this.element.style.display="none"}},{key:"attachWidget",value:function(t){this.element.parentElement.append(t)}},{key:"storeInitialData",value:function(){var e=this;this.$app.store.initialData=Array.from(this.getAllOptions).map(function(t){return e.$store.options.getModel(t)})}},{key:"getAllOptions",get:function(){return Array.from(this.element.querySelectorAll("option"))}},{key:"appendOption",value:function(t){var e=elements.selectOption;return e.value="__new_option__",e.innerHTML=t.content,this.element.append(e),e}},{key:"registerListeners",value:function(){var t=this;this.$app.event.on("option_chosen",function(){t.update()}),this.$app.event.on("option_unselected",function(){t.update()})}},{key:"update",value:function(){var n=this;this.element.querySelectorAll("option").forEach(function(t){var e;null!==(e=n.$store.options.findByOptionElement(t))&&void 0!==e&&e.selected?t.selected=!0:t.selected=!1})}},{key:"isMultiple",get:function(){return this.element.multiple}}]),i}(),_clean=new WeakSet,_findOptionElementByDataOption=new WeakSet,ResultListList=function(){_inherits(i,Component);var n=_createSuper(i);function i(t,e){return _classCallCheck(this,i),e=n.call(this,void 0,e),_findOptionElementByDataOption.add(_assertThisInitialized(e)),_clean.add(_assertThisInitialized(e)),e.create(t),e.registerEventListener(),e}return _createClass(i,[{key:"create",value:function(t){var e=elements.resultListList;t.append(e),this.element=e}},{key:"destroy",value:function(){this.element.remove(),this.$event.off("navigation_action")}},{key:"createListAndScroll",value:function(){console.log("hey"),this.createResultList(),this.scrollToView()}},{key:"registerEventListener",value:function(){var t=this;this.chooseListener(),this.$event.on("navigation_action",function(){t.createListAndScroll()})}},{key:"chooseListener",value:function(){var e=this;this.element.addEventListener("click",function(t){t.target.matches("li.".concat(classnames.result_list_item,":not(.").concat(classnames.add_item,")"))?e.choose(t.target.innerHTML):t.target.matches("li."+classnames.add_item)&&e.choose()})}},{key:"choose",value:function(t){t?this.$option.choose(this.$option.findByTextContent(t)):this.$option.equalToInput||this.$option.choose()}},{key:"createListResults",value:function(){_classPrivateMethodGet(this,_clean,_clean2).call(this),this.append(this.results),!this.$option.equalToInput&&this.$textInput.hasMinLength&&this.appendAddItemToList()}},{key:"createListAllResults",value:function(){_classPrivateMethodGet(this,_clean,_clean2).call(this),this.append(this.$option.all)}},{key:"createResultList",value:function(){this.$app.resultListVoter.canOpenAll()&&this.createListAllResults(),this.$app.resultListVoter.canOpen()&&this.createListResults()}},{key:"append",value:function(t){var e=this;t.forEach(function(t){e.hasOption(t)||e.appendElementToList(e.createResultItem(t))})}},{key:"hasOption",value:function(e){return Array.from(this.allListItems).find(function(t){return t.textContent===e.textContent})}},{key:"appendAddItemToList",value:function(){var t;this.hasAddNewItem||(t=elements.addItem,this.$navigation.isAddItem()&&t.classList.add(classnames.result_list_item_active),this.appendElementToList(t))}},{key:"appendElementToList",value:function(t){this.element.append(t)}},{key:"hasAddNewItem",get:function(){return this.element.querySelector("."+classnames.add_item)}},{key:"createResultItem",value:function(t){var e=elements.resultItem;return this.$navigation.isActive(t)&&e.classList.add(classnames.result_list_item_active),e.innerHTML=t.content,e}},{key:"isEmpty",value:function(t){return!t.querySelectorAll("".concat(i.selector," > .").concat(classnames.result_list_item)).length}},{key:"allListItems",get:function(){return this.element.getElementsByTagName("li")}},{key:"results",get:function(){var t;return this.$app.resultListVoter.canOpenAll()?null!==(t=this.$option.all)&&void 0!==t?t:[]:this.$app.resultListVoter.canOpen()?this.$textInput.hasMinLength?this.$option.startingWithInput:[]:void 0}},{key:"setResultBoxHeight",value:function(){var t=this.allListItems,e=0;if(5<t.length)for(var n=0;n<5;n++)e+=t.item(n).offsetHeight;this.element.style.height=e?e+"px":"auto"}},{key:"scrollToView",value:function(){var t=this.getActiveElement();t&&t.scrollIntoView({block:"nearest",inline:"nearest",behavior:"smooth",boundary:this.element})}},{key:"getActiveElement",value:function(){var t=this.$navigation.item;return t?_classPrivateMethodGet(this,_findOptionElementByDataOption,_findOptionElementByDataOption2).call(this,t):null}}],[{key:"selector",get:function(){return".".concat(classnames.result_list)}}]),i}(),_clean2=function(){for(var t=this.allListItems,e=0,n=t.length;e!==n;++e)t[0].parentNode.removeChild(t[0])},_findOptionElementByDataOption2=function(e){return"add"===e?this.element.querySelector(".".concat(classnames.add_item)):Array.from(this.allListItems).find(function(t){return(null==t?void 0:t.innerHTML)===(null==e?void 0:e.content)})},_clean$1=new WeakSet,ResultList=function(){_inherits(i,Component);var n=_createSuper(i);function i(t,e){return _classCallCheck(this,i),e=n.call(this,t,e),_clean$1.add(_assertThisInitialized(e)),_defineProperty(_assertThisInitialized(e),"list",void 0),_defineProperty(_assertThisInitialized(e),"closeEvents",["widget_clicked_outside","input_pressed_esc","input_pressed_tab","window_blur"]),e.appendList(),e.registerEventListener(),e}return _createClass(i,[{key:"registerEventListener",value:function(){var e=this;this.closeEvents.forEach(function(t){e.$event.on(t,function(){e.closeResultBox()})}),this.$event.on("input_input_debounced",function(){e.$store.inputIsEmpty?e.closeResultBox():(e.list.createResultList(),e.createBox())}),this.$event.on("input_focus",function(){e.list.createResultList(),e.createBox()})}},{key:"createBox",value:function(){this.openResultBox(),this.list.setResultBoxHeight()}},{key:"openResultBox",value:function(){this.open||(this.element.style.display="block")}},{key:"open",get:function(){return"none"!==this.element.style.display}},{key:"closeResultBox",value:function(){_classPrivateMethodGet(this,_clean$1,_clean2$1).call(this),this.open&&(this.element.style.display="none"),this.$navigation.clear()}},{key:"appendList",value:function(){this.list=new ResultListList(this.element,this.$app)}},{key:"isOpen",value:function(t){return"block"===t.querySelector(i.selector).style.display}}],[{key:"selector",get:function(){return".".concat(classnames.result_list_container)}}]),i}(),_clean2$1=function(){this.list.destroy(),this.appendList()};function debounce(i,s){var o;return function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];clearTimeout(o),o=setTimeout(function(){clearTimeout(o),i.apply(void 0,e)},s)}}function getLastOfArray(t){return t[t.length-1]}function compareOptions(t,e){return t.value===e.value&&t.content===e.content}var TextInput=function(){_inherits(s,Component);var i=_createSuper(s);function s(t,e){var n;return _classCallCheck(this,s),_defineProperty(_assertThisInitialized(n=i.call(this,t,e)),"resetValue",function(){n.element.value=null}),n.registerListeners(),n}return _createClass(s,[{key:"registerListeners",value:function(){var e=this;this.element.addEventListener("input",function(){e.refreshState(),e.adjustWidth()}),this.element.addEventListener("keydown",function(t){"Enter"===t.key&&e.enterKeyEvent(t),"Escape"===t.key&&e.escapeKeyEvent(t),"Backspace"===t.key&&e.backspaceKeyEvent(t),"Tab"===t.key&&e.$event.emit("input_pressed_tab"),e.$navigation.events.handle(t)}),this.element.addEventListener("input",debounce(function(t){e.$event.emit("input_input_debounced",t)},250)),this.element.addEventListener("focus",function(){e.$event.emit("input_focus")}),this.element.addEventListener("blur",function(t){e.$event.emit("input_blur",t)}),this.$event.on("input_cleared",this.resetValue)}},{key:"length",get:function(){var t;return null===(t=this.$store.input)||void 0===t?void 0:t.length}},{key:"hasMinLength",get:function(){return 2<=this.length}},{key:"adjustWidth",value:function(){this.element.style.width="".concat(this.length?this.length+1:1,"ch")}},{key:"refreshState",value:function(){this.$store.input=this.element.value}},{key:"limit",value:function(t){this.$app.optionVoter.canAdd()||t.preventDefault()}},{key:"clear",value:function(){this.$store.input=null,this.$event.emit("input_cleared")}},{key:"enterKeyEvent",value:function(t){t.preventDefault(),(this.hasMinLength||this.$app.optionVoter.canAdd())&&this.$option.choose()}},{key:"escapeKeyEvent",value:function(){this.$event.emit("input_pressed_esc")}},{key:"backspaceKeyEvent",value:function(t){this.$store.inputIsEmpty&&!this.$option.isListEmpty&&(t.preventDefault(),this.$option.unselect(getLastOfArray(this.$option.selected)))}},{key:"isFocussed",get:function(){return document.activeElement.classList.contains(classnames.input)}},{key:"focus",value:function(){this.isFocussed||this.element.focus()}},{key:"destroy",value:function(){this.$event.off("input_cleared",this.resetValue)}}],[{key:"selector",get:function(){return"."+classnames.input}}]),s}(),TagList=function(){_inherits(i,Component);var n=_createSuper(i);function i(t,e){return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(e=n.call(this,t,e)),"textInput",void 0),e.appendTextInput(),e.registerEventListeners(),e}return _createClass(i,[{key:"appendTextInput",value:function(){this.textInput=new TextInput(elements.textInput,this.$app),this.element.append(this.textInput.element)}},{key:"registerEventListeners",value:function(){var e=this;this.element.addEventListener("click",function(t){e.clickedOnRemoveButton(t.target)&&(t.preventDefault(),e.$option.unselect(e.$option.findByTextContent(e.findClickedTag(t).innerHTML)))})}},{key:"clickedOnRemoveButton",value:function(t){return!!t.matches("button."+classnames.remove_button)||(!!t.matches("svg."+classnames.remove_button_svg)||!!t.matches("path"))}},{key:"remove",value:function(){this.textInput.destroy(),this.element.remove()}},{key:"findClickedTag",value:function(t){return t.target.closest("."+classnames.item).querySelector("."+classnames.item_text_span)}}],[{key:"create",value:function(t,e){var n=elements.list;return t.selected.forEach(function(t){return n.append(elements.getItem(t.content))}),new i(n,e)}},{key:"selector",get:function(){return"."+classnames.list}}]),i}(),_focusInput=new WeakSet,Widget=function(){_inherits(s,Component);var i=_createSuper(s);function s(t,e){var n;return _classCallCheck(this,s),n=i.call(this,elements.widget,e),_focusInput.add(_assertThisInitialized(n)),_defineProperty(_assertThisInitialized(n),"initialElement",void 0),_defineProperty(_assertThisInitialized(n),"tagList",void 0),_defineProperty(_assertThisInitialized(n),"resultList",void 0),n.initialElement=new InitialElement(t,e),n.resultList=new ResultList(n.element.querySelector("."+classnames.result_list_container),e),n.tagList=new TagList(n.element.querySelector("."+classnames.list),e),n.initialElement.attachWidget(n.element),n.registerListeners(),n}return _createClass(s,[{key:"registerListeners",value:function(){var e=this;this.element.addEventListener("click",function(t){e.$app.inputVoter.shouldFocusAfterEvent(t)&&_classPrivateMethodGet(e,_focusInput,_focusInput2).call(e)}),this.$event.on("option_chosen",function(){e.update(),_classPrivateMethodGet(e,_focusInput,_focusInput2).call(e)}),this.$event.on("option_unselected",function(){e.update(),_classPrivateMethodGet(e,_focusInput,_focusInput2).call(e)})}},{key:"update",value:function(){this.appendNewSelectOptions(),this.updateTagList(),this.closeResultListBox(),this.clearTextInput(),this.limit()}},{key:"appendNewSelectOptions",value:function(){var e=this;this.$option.all.forEach(function(t){e.$option.isNew(t)&&e.initialElement.appendOption(t)}),this.initialElement.update()}},{key:"updateTagList",value:function(){this.tagList.remove(),this.tagList=TagList.create(this.$option,this.$app),this.element.append(this.tagList.element)}},{key:"closeResultListBox",value:function(){this.resultList.closeResultBox()}},{key:"clearTextInput",value:function(){this.tagList.textInput.clear()}},{key:"limit",value:function(){this.$app.optionVoter.canAdd()?this.tagList.textInput.element.maxLength=524288:this.tagList.textInput.element.maxLength=0}}],[{key:"selector",get:function(){return".".concat(classnames.widget)}}]),s}(),_focusInput2=function(){this.tagList.textInput.focus()},Event=function(){function t(){_classCallCheck(this,t),_defineProperty(this,"subscribers",{})}return _createClass(t,[{key:"on",value:function(t,e){Array.isArray(this.subscribers[t])||(this.subscribers[t]=[]),this.subscribers[t].push(e)}},{key:"off",value:function(t,e){this.subscribers[t]=e?this.subscribers[t].filter(function(t){return t!==e}):[]}},{key:"emit",value:function(t,e){Array.isArray(this.subscribers[t])&&this.subscribers[t].forEach(function(t){t(e)})}}]),t}(),Config=function t(){_classCallCheck(this,t),_defineProperty(this,"textInput",{limit:null}),_defineProperty(this,"resultList",{openOnFocus:!0})},_clean$2=new WeakSet,Option=function(){_inherits(n,Component);var e=_createSuper(n);function n(t){return _classCallCheck(this,n),t=e.call(this,void 0,t),_clean$2.add(_assertThisInitialized(t)),_defineProperty(_assertThisInitialized(t),"options",void 0),t}return _createClass(n,[{key:"all",get:function(){return this.options.filter(function(t){return!!t.content})}},{key:"startingWithInput",get:function(){var e=this;return this.options.filter(function(t){return t.content.includes(e.$store.input)&&!t.selected})}},{key:"equalToInput",get:function(){var e=this;return this.options.find(function(t){return t.content===e.$store.input})}},{key:"selected",get:function(){return this.options.filter(function(t){return t.selected}).sort(function(t,e){return t.selected-e.selected})}},{key:"findByTextContent",value:function(e){return this.options.find(function(t){return t.content===e})}},{key:"findByOptionElement",value:function(e){return this.options.find(function(t){return null===e.value?t.content===e.innerHTML:"__new_option__"===e.value?null===t.value&&t.content===e.innerHTML:t.value===e.value&&t.content===e.innerHTML})}},{key:"choose",value:function(t){t?this.select(t):this.$navigation.item?this.selectNavigationItem():this.selectInputValue(),this.$event.emit("option_chosen",t)}},{key:"append",value:function(t){if(!t){t=this.options.push(this.getModel())-1;return this.options[t]}}},{key:"getModel",value:function(t){return{value:t?t.value:null,content:t?t.innerHTML:this.$store.input,selected:this.decide(t),timestamp:t&&this.decide(t)?Date.now():null}}},{key:"select",value:function(e){this.options.map(function(t){t.content===e.content&&(t.selected=!0,t.timestamp=Date.now)})}},{key:"unselect",value:function(e){this.options.map(function(t){t.content===e.content&&(t.selected=!1)}),this.$event.emit("option_unselected"),_classPrivateMethodGet(this,_clean$2,_clean2$2).call(this)}},{key:"decide",value:function(t){var e=!1;if(t){if(!t.value&&!t.content)return!1;e=t.selected}return e}},{key:"isNew",value:function(e){return!this.$store.initialData.find(function(t){return compareOptions(t,e)})}},{key:"isListEmpty",get:function(){return!this.selected.length}},{key:"selectNavigationItem",value:function(){"add"===this.$navigation.item?this.selectInputValue():this.select(this.$navigation.item)}},{key:"selectInputValue",value:function(){this.select(this.append())}},{key:"allTaken",get:function(){var t;return!(this.$app.config.textInput.limit>(null===(t=this.selected)||void 0===t?void 0:t.length))}}]),n}(),_clean2$2=function(){var e=this;this.options=this.options.filter(function(t){return!e.isNew(t)})},Store=function(){_inherits(n,Component);var e=_createSuper(n);function n(t){return _classCallCheck(this,n),_defineProperty(_assertThisInitialized(t=e.call(this,void 0,t)),"input",null),_defineProperty(_assertThisInitialized(t),"initialData",[]),_defineProperty(_assertThisInitialized(t),"options",new Option(t.$app)),t}return _createClass(n,[{key:"inputIsEmpty",get:function(){var t;return!this.input||(null===(t=this.input)||void 0===t?void 0:t.length)<=0}}]),n}(),NavigationEvents=function(){_inherits(n,Component);var e=_createSuper(n);function n(t){return _classCallCheck(this,n),e.call(this,void 0,t)}return _createClass(n,[{key:"handle",value:function(t){"ArrowDown"===t.key&&(t.preventDefault(),this.arrowDownEvent(t)),"ArrowUp"===t.key&&(t.preventDefault(),this.arrowUpEvent(t))}},{key:"arrowDownEvent",value:function(t){this.isNavigationEnabled(t)&&this.$navigation.down()}},{key:"arrowUpEvent",value:function(t){this.isNavigationEnabled(t)&&this.$navigation.up()}},{key:"isNavigationEnabled",value:function(t){t=this.getWidgetFromEvent(t);return this.$app.widget.resultList.isOpen(t)&&!this.$app.widget.resultList.list.isEmpty(t)}},{key:"getWidgetFromEvent",value:function(t){return t.target.closest(Widget.selector)}}]),n}(),Navigation=function(){_inherits(i,Component);var n=_createSuper(i);function i(t){var e;return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(e=n.call(this,void 0,t)),"item",""),e.events=new NavigationEvents(t),e}return _createClass(i,[{key:"up",value:function(){var t,e=this.$app.widget.resultList.list.results;this.selectedItem?(t=e.indexOf(this.selectedItem),"add"===this.selectedItem?this.selectedItem=e[e.length-1]:(t<=e.length-1&&(this.selectedItem=e[t-1]),e[t-1]||(this.$app.resultListVoter.canOpenAll()?this.selectedItem=e[e.length-1]:this.selectedItem="add"))):this.$app.resultListVoter.canOpenAll()?this.selectedItem=e[e.length-1]:this.selectedItem="add",this.$event.emit("navigation_action","up")}},{key:"down",value:function(){var t,e=this.$app.widget.resultList.list.results;this.selectedItem?"add"!==this.selectedItem?(t=e.indexOf(this.selectedItem),e.length>t+1&&(this.selectedItem=e[t+1]),e.length===t+1&&(this.$app.resultListVoter.canOpenAll()?this.selectedItem=e[0]:this.selectedItem="add")):this.selectedItem=e[0]:e.length?this.selectedItem=e[0]:this.selectedItem="add",this.$event.emit("navigation_action","down")}},{key:"clear",value:function(){this.selectedItem=""}},{key:"isActive",value:function(t){return t===this.selectedItem}},{key:"isAddItem",value:function(){return"add"===this.selectedItem}},{key:"selectedItem",get:function(){return this.item},set:function(t){this.item=t}}]),i}(),ResultListVoter=function(){function e(t){_classCallCheck(this,e),this.$app=t}return _createClass(e,[{key:"canOpenAll",value:function(){return this.$app.store.inputIsEmpty&&this.$app.optionVoter.canAdd()}},{key:"canOpen",value:function(){return!this.$app.store.inputIsEmpty&&this.$app.optionVoter.canAdd()}}]),e}(),OptionVoter=function(){function e(t){_classCallCheck(this,e),this.app=t}return _createClass(e,[{key:"canAdd",value:function(){return!this.app.store.options.allTaken}}]),e}(),InputVoter=function(){function e(t){_classCallCheck(this,e),this.app=t}return _createClass(e,[{key:"shouldFocusAfterEvent",value:function(t){return!t.target.classList.contains(classnames.result_list_item)&&!t.target.closest(TagList.selector)}}]),e}(),Choosy=function(){function e(t){_classCallCheck(this,e),_defineProperty(this,"widget",void 0),_defineProperty(this,"config",void 0),this.store=new Store(this),this.event=new Event,this.widget=new Widget(t,this),this.config=new Config,this.navigation=new Navigation(this),this.resultListVoter=new ResultListVoter(this),this.optionVoter=new OptionVoter(this),this.inputVoter=new InputVoter(this),(this.widget.element.__x=this).initializeData(),this.registerEventListener(),this.resolveOptions()}return _createClass(e,[{key:"registerEventListener",value:function(){this.clickedOutsideOfWidgetEvent(),this.windowBlurEvent()}},{key:"clickedOutsideOfWidgetEvent",value:function(){var e=this;document.addEventListener("click",function(t){e.widget.element.contains(t.target)||e.isClickOnTagList(t)||e.event.emit("widget_clicked_outside")})}},{key:"windowBlurEvent",value:function(){var t=this;window.addEventListener("blur",function(){t.event.emit("window_blur")})}},{key:"isClickOnTagList",value:function(t){return!!t.target.closest(TagList.selector)}},{key:"initializeData",value:function(){this.store.options.options=Array.from(this.store.initialData)}},{key:"resolveOptions",value:function(){this.widget.initialElement.isMultiple||(this.config.textInput.limit=1)}}]),e}();export default Choosy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
