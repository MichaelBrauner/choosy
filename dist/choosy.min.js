function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}function _createSuper(n){var i=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,i?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _classPrivateMethodGet(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var classnames={widget:"choosy-widget",input:"choosy-input",list:"choosy-list",item:"choosy-item",item_text_span:"choosy-item-text-span",remove_button:"choosy-remove-button",remove_button_svg:"choosy-remove-button-svg",result_list_container:"choosy-result-list-container",result_list:"choosy-result-list",result_list_item:"choosy-result-item",result_list_item_active:"active",add_item:"choosy-add-item"},elements={get textInput(){var e=this.create("input","text",[classnames.input]);return e.style.width="1ch",e},get widget(){var e=this.create("div",null,[classnames.widget]);return e.append(this.list),e.append(this.resultList),e},get list(){return this.create("div",null,[classnames.list])},get removeButton(){var e=this.create("button",null,[classnames.remove_button]);return e.append(this.removeSVG),e},get removeSVG(){return(new DOMParser).parseFromString("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill=\"currentColor\" class=\"".concat(classnames.remove_button_svg,"\">\n            <path fill-rule='evenodd'\n                  d='M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z'></path>\n            </svg>"),"text/html").body.firstChild},get resultList(){var e=this.create("div",null,[classnames.result_list_container]);return e.style.display="none",e},get resultListList(){return this.create("ul",null,[classnames.result_list])},get resultItem(){return this.create("li",null,[classnames.result_list_item])},get addItem(){var e=this.resultItem;return e.classList.add(classnames.add_item),e.innerHTML="Add new",e},get selectOption(){return this.create("option",null)},getItem:function(e){var t=this.create("div",null,[classnames.item]);return t.append(this.getItemTextSpan(e)),t.append(this.removeButton),t},getItemTextSpan:function(e){var t=this.create("span",null,[classnames.item_text_span]);return t.innerHTML=e,t},create:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],i=document.createElement(e);return t&&(i.type=t),n.forEach(function(e){i.classList.add(e)}),i}},Component=function(){function n(e,t){_classCallCheck(this,n),this.$app=e,this.element=t}return _createClass(n,[{key:"$store",get:function(){return this.$app.store}},{key:"$navigation",get:function(){return this.$app.navigation}},{key:"$event",get:function(){return this.$app.event}},{key:"$option",get:function(){return this.$app.store.options}},{key:"$textInput",get:function(){return this.$app.widget.tagList.textInput}},{key:"$widget",get:function(){return this.$app.widget}},{key:"$config",get:function(){return this.$app.config}}]),n}(),InitialElement=function(){_inherits(i,Component);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),(e=n.call(this,t,e)).storeInitialData(),e.hide(),e.registerListeners(),e}return _createClass(i,[{key:"hide",value:function(){this.element.style.display="none"}},{key:"attachWidget",value:function(e){this.element.parentElement.append(e)}},{key:"storeInitialData",value:function(){var t=this;this.$app.store.initialData=Array.from(this.getAllOptions).map(function(e){return t.$store.options.getModel(e)})}},{key:"getAllOptions",get:function(){return Array.from(this.element.querySelectorAll("option"))}},{key:"appendOption",value:function(e){var t=elements.selectOption;return t.value="__new_option__"+e.content,t.innerHTML=e.content,this.element.append(t),t}},{key:"registerListeners",value:function(){var e=this;this.$app.event.on("option_chosen",function(){e.update()}),this.$app.event.on("option_unselected",function(){e.update()})}},{key:"update",value:function(e){var n=this;this.element.querySelectorAll("option").forEach(function(e){var t;null!==(t=n.$store.options.findByOptionElement(e))&&void 0!==t&&t.selected?e.selected=!0:e.selected=!1}),null!=e&&!e||this.triggerChangeEvent()}},{key:"triggerChangeEvent",value:function(){this.element.dispatchEvent(new Event("change"))}},{key:"isMultiple",get:function(){return this.element.multiple}},{key:"updateOptionsData",value:function(){var t=this;this.storeInitialData(),this.$option.options=Array.from(this.getAllOptions).map(function(e){return t.$store.options.getModel(e)}),this.$widget.update(!1)}},{key:"clean",value:function(){var t=this;this.getAllOptions.forEach(function(e){t.isOptionNew(e)&&!t.isSelected(e)&&e.remove()})}},{key:"isOptionNew",value:function(e){return e.value.startsWith("__new_option__")}},{key:"isSelected",value:function(t){return!!this.$option.selected.find(function(e){return t.textContent===e.content})}}]),i}(),_clean$2=new WeakSet,_findOptionElementByDataOption=new WeakSet,ResultListList=function(){_inherits(i,Component);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),t=n.call(this,t,void 0),_findOptionElementByDataOption.add(_assertThisInitialized(t)),_clean$2.add(_assertThisInitialized(t)),t.create(e),t.registerEventListener(),t}return _createClass(i,[{key:"create",value:function(e){var t=elements.resultListList;e.append(t),this.element=t}},{key:"destroy",value:function(){this.element.remove(),this.$event.off("navigation_action")}},{key:"createListAndScroll",value:function(){this.createResultList(),this.scrollToView()}},{key:"registerEventListener",value:function(){var e=this;this.chooseListener(),this.$event.on("navigation_action",function(){e.createListAndScroll()})}},{key:"chooseListener",value:function(){var t=this;this.element.addEventListener("click",function(e){e.target.matches("li.".concat(classnames.result_list_item,":not(.").concat(classnames.add_item,")"))?t.choose(e.target.innerHTML):e.target.matches("li."+classnames.add_item)&&t.choose()})}},{key:"choose",value:function(e){e?this.$option.choose(this.$option.findByTextContent(e)):this.$option.equalToInput||this.$option.choose()}},{key:"createListResults",value:function(){_classPrivateMethodGet(this,_clean$2,_clean2$2).call(this),this.append(this.results),!this.$option.equalToInput&&this.$textInput.hasMinLength&&this.appendAddItemToList()}},{key:"createListAllResults",value:function(){_classPrivateMethodGet(this,_clean$2,_clean2$2).call(this),this.append(this.$option.all)}},{key:"createResultList",value:function(){this.$app.resultListVoter.canOpenAll()&&this.createListAllResults(),this.$app.resultListVoter.canOpen()&&this.createListResults()}},{key:"append",value:function(e){var t=this;e.forEach(function(e){t.hasOption(e)||t.appendElementToList(t.createResultItem(e))})}},{key:"hasOption",value:function(t){return Array.from(this.allListItems).find(function(e){return e.textContent===t.textContent})}},{key:"appendAddItemToList",value:function(){var e;this.hasAddNewItem||(e=elements.addItem,this.$navigation.isAddItem()&&e.classList.add(classnames.result_list_item_active),this.appendElementToList(e))}},{key:"appendElementToList",value:function(e){this.element.append(e)}},{key:"hasAddNewItem",get:function(){return this.element.querySelector("."+classnames.add_item)}},{key:"createResultItem",value:function(e){var t=elements.resultItem;return this.$navigation.isActive(e)&&t.classList.add(classnames.result_list_item_active),t.innerHTML=e.content,t}},{key:"isEmpty",value:function(e){return!e.querySelectorAll("".concat(i.selector," > .").concat(classnames.result_list_item)).length}},{key:"allListItems",get:function(){return this.element.getElementsByTagName("li")}},{key:"results",get:function(){var e;return this.$app.resultListVoter.canOpenAll()?null!==(e=this.$option.all)&&void 0!==e?e:[]:this.$app.resultListVoter.canOpen()?this.$textInput.hasMinLength?this.$option.startingWithInput:[]:void 0}},{key:"setResultBoxHeight",value:function(){var e=this.allListItems,t=0;if(5<e.length)for(var n=0;n<5;n++)t+=e.item(n).offsetHeight;this.element.style.height=t?t+"px":"auto"}},{key:"scrollToView",value:function(){var e=this.getActiveElement();e&&e.scrollIntoView({block:"nearest",inline:"nearest",behavior:"smooth",boundary:this.element})}},{key:"getActiveElement",value:function(){var e=this.$navigation.item;return e?_classPrivateMethodGet(this,_findOptionElementByDataOption,_findOptionElementByDataOption2).call(this,e):null}}],[{key:"selector",get:function(){return".".concat(classnames.result_list)}}]),i}();function _clean2$2(){for(var e=this.allListItems,t=0,n=e.length;t!==n;++t)e[0].parentNode.removeChild(e[0])}function _findOptionElementByDataOption2(t){return"add"===t?this.element.querySelector(".".concat(classnames.add_item)):Array.from(this.allListItems).find(function(e){return(null==e?void 0:e.innerHTML)===(null==t?void 0:t.content)})}var _clean$1=new WeakSet,ResultList=function(){_inherits(i,Component);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),e=n.call(this,t,e),_clean$1.add(_assertThisInitialized(e)),_defineProperty(_assertThisInitialized(e),"list",void 0),_defineProperty(_assertThisInitialized(e),"closeEvents",["widget_clicked_outside","input_pressed_esc","input_pressed_tab","window_blur"]),e.appendList(),e.registerEventListener(),e}return _createClass(i,[{key:"registerEventListener",value:function(){var t=this;this.closeEvents.forEach(function(e){t.$event.on(e,function(){t.closeResultBox()})}),this.$event.on("input_input_debounced",function(){t.$store.inputIsEmpty?t.closeResultBox():(t.list.createResultList(),t.createBox())}),this.$event.on("input_focus",function(){t.list.createResultList(),t.createBox()})}},{key:"createBox",value:function(){this.openResultBox(),this.list.setResultBoxHeight()}},{key:"openResultBox",value:function(){this.open||(this.element.style.display="block")}},{key:"open",get:function(){return"none"!==this.element.style.display}},{key:"closeResultBox",value:function(){_classPrivateMethodGet(this,_clean$1,_clean2$1).call(this),this.open&&(this.element.style.display="none"),this.$navigation.clear()}},{key:"appendList",value:function(){this.list=new ResultListList(this.element,this.$app)}},{key:"isOpen",value:function(e){return"block"===e.querySelector(i.selector).style.display}},{key:"destroy",value:function(){this.list.destroy()}}],[{key:"selector",get:function(){return".".concat(classnames.result_list_container)}}]),i}();function _clean2$1(){this.destroy(),this.appendList()}function debounce(i,s){var o;return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];clearTimeout(o),o=setTimeout(function(){clearTimeout(o),i.apply(void 0,t)},s)}}function getLastOfArray(e){return e[e.length-1]}function compareOptions(e,t){return e.value===t.value&&e.content===t.content}function merge(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];for(var s=0,o=n;s<o.length;s++){var r,a=o[s];for(r in a)null!=a[r]&&(e[r]=replaceValue(e[r],a[r]))}return e}function replaceValue(n,e){return Array.isArray(n)&&Array.isArray(e)?e.map(function(e,t){return replaceValue(n[t],e)}):isObject(n)&&isObject(e)?merge(n,e):e}function isObject(e){return e&&e.constructor===Object}var TextInput=function(){_inherits(s,Component);var i=_createSuper(s);function s(e,t){var n;return _classCallCheck(this,s),_defineProperty(_assertThisInitialized(n=i.call(this,t,e)),"resetValue",function(){n.element.value=null}),n.registerListeners(),n}return _createClass(s,[{key:"registerListeners",value:function(){var t=this;this.element.addEventListener("input",function(){t.refreshState(),t.adjustWidth()}),this.element.addEventListener("keydown",function(e){"Enter"===e.key&&t.enterKeyEvent(e),"Escape"===e.key&&t.escapeKeyEvent(e),"Backspace"===e.key&&t.backspaceKeyEvent(e),"Tab"===e.key&&t.$event.emit("input_pressed_tab"),t.$navigation.events.handle(e)}),this.element.addEventListener("input",debounce(function(e){t.$event.emit("input_input_debounced",e)},250)),this.element.addEventListener("focus",function(){t.$event.emit("input_focus")}),this.element.addEventListener("blur",function(e){t.$event.emit("input_blur",e)}),this.$event.on("input_cleared",this.resetValue)}},{key:"length",get:function(){var e;return null===(e=this.$store.input)||void 0===e?void 0:e.length}},{key:"hasMinLength",get:function(){return 2<=this.length}},{key:"adjustWidth",value:function(){this.element.style.width="".concat(this.length?this.length+1:1,"ch")}},{key:"refreshState",value:function(){this.$store.input=this.element.value}},{key:"limit",value:function(e){this.$app.optionVoter.canAdd()||e.preventDefault()}},{key:"clear",value:function(){this.$store.input=null,this.$event.emit("input_cleared")}},{key:"enterKeyEvent",value:function(e){e.preventDefault(),(this.hasMinLength||this.$app.optionVoter.canAdd())&&this.$option.choose()}},{key:"escapeKeyEvent",value:function(){this.$event.emit("input_pressed_esc")}},{key:"backspaceKeyEvent",value:function(e){this.$store.inputIsEmpty&&!this.$option.isListEmpty&&(e.preventDefault(),this.$option.unselect(getLastOfArray(this.$option.selected)))}},{key:"isFocussed",get:function(){return document.activeElement.classList.contains(classnames.input)}},{key:"focus",value:function(){this.isFocussed||this.element.focus()}},{key:"destroy",value:function(){this.$event.off("input_cleared",this.resetValue)}}],[{key:"selector",get:function(){return"."+classnames.input}}]),s}(),TagList=function(){_inherits(i,Component);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(e=n.call(this,t,e)),"textInput",void 0),e.appendTextInput(),e.registerEventListeners(),e}return _createClass(i,[{key:"appendTextInput",value:function(){this.textInput=new TextInput(elements.textInput,this.$app),this.element.append(this.textInput.element)}},{key:"registerEventListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){t.clickedOnRemoveButton(e.target)&&(e.preventDefault(),t.$option.unselect(t.$option.findByTextContent(t.findClickedTag(e).innerHTML)))})}},{key:"clickedOnRemoveButton",value:function(e){return!!e.matches("button."+classnames.remove_button)||(!!e.matches("svg."+classnames.remove_button_svg)||!!e.matches("path"))}},{key:"remove",value:function(){this.textInput.destroy(),this.element.remove()}},{key:"findClickedTag",value:function(e){return e.target.closest("."+classnames.item).querySelector("."+classnames.item_text_span)}}],[{key:"create",value:function(e,t){var n=elements.list;return e.selected.forEach(function(e){return n.append(elements.getItem(e.content))}),new i(n,t)}},{key:"selector",get:function(){return"."+classnames.list}}]),i}(),_focusInput=new WeakSet,Widget=function(){_inherits(s,Component);var i=_createSuper(s);function s(e,t){var n;return _classCallCheck(this,s),n=i.call(this,t,elements.widget),_focusInput.add(_assertThisInitialized(n)),_defineProperty(_assertThisInitialized(n),"initialElement",void 0),_defineProperty(_assertThisInitialized(n),"tagList",void 0),_defineProperty(_assertThisInitialized(n),"resultList",void 0),n.initialElement=new InitialElement(e,t),n.resultList=new ResultList(n.element.querySelector("."+classnames.result_list_container),t),n.tagList=new TagList(n.element.querySelector("."+classnames.list),t),n.initialElement.attachWidget(n.element),n.registerListeners(),n}return _createClass(s,[{key:"registerListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){t.$app.inputVoter.shouldFocusOnWidgetClick(e)&&_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)}),this.$event.on("option_chosen",function(){t.update(!1),_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)}),this.$event.on("option_unselected",function(){t.update(!1),_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)})}},{key:"update",value:function(e){this.appendNewSelectOptions(),this.initialElement.update(e),this.updateTagList(),this.closeResultListBox(),this.clearTextInput(),this.limit(),this.updateConfigOptions()}},{key:"appendNewSelectOptions",value:function(){var t=this;this.$option.all.forEach(function(e){t.$option.isNew(e)&&t.initialElement.appendOption(e)}),this.initialElement.clean()}},{key:"updateTagList",value:function(){this.tagList.remove(),this.tagList=TagList.create(this.$option,this.$app),this.element.append(this.tagList.element)}},{key:"closeResultListBox",value:function(){this.resultList.closeResultBox()}},{key:"clearTextInput",value:function(){this.tagList.textInput.clear()}},{key:"limit",value:function(){this.$app.optionVoter.canAdd()?this.tagList.textInput.element.maxLength=524288:this.tagList.textInput.element.maxLength=0}},{key:"updateConfigOptions",value:function(){this.$config.resolveEnabled()}},{key:"disable",value:function(){this.element.classList.add("disabled"),this.tagList.textInput.element.tabIndex=-1}},{key:"enable",value:function(){this.element.classList.remove("disabled"),this.tagList.textInput.element.tabIndex=0}},{key:"destroy",value:function(){this.tagList.remove(),this.resultList.destroy(),this.element.remove()}}],[{key:"selector",get:function(){return".".concat(classnames.widget)}}]),s}();function _focusInput2(){this.tagList.textInput.focus()}var Event$1=function(){function e(){_classCallCheck(this,e),_defineProperty(this,"subscribers",{})}return _createClass(e,[{key:"on",value:function(e,t){Array.isArray(this.subscribers[e])||(this.subscribers[e]=[]),this.subscribers[e].push(t)}},{key:"off",value:function(e,t){this.subscribers[e]=t?this.subscribers[e].filter(function(e){return e!==t}):[]}},{key:"emit",value:function(e,t){Array.isArray(this.subscribers[e])&&this.subscribers[e].forEach(function(e){e(t)})}}]),e}(),Config=function(){_inherits(i,Component);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(e=n.call(this,e,void 0)),"options",{enabled:!0,limit:null,openOnFocus:!0}),t&&(e.options=merge(e.options,t)),e}return _createClass(i,[{key:"resolveEnabled",value:function(){this.options.enabled&&this.$widget.enable(),this.options.enabled||this.$widget.disable()}}]),i}(),_clean=new WeakSet,Option=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),e=t.call(this,e,void 0),_clean.add(_assertThisInitialized(e)),_defineProperty(_assertThisInitialized(e),"options",void 0),e}return _createClass(n,[{key:"all",get:function(){var t=this;return this.options.filter(function(e){return!!e.content&&!t.isSelected(e)})}},{key:"startingWithInput",get:function(){var t=this;return this.options.filter(function(e){return e.content.includes(t.$store.input)&&!e.selected})}},{key:"equalToInput",get:function(){var t=this;return this.options.find(function(e){return e.content===t.$store.input})}},{key:"selected",get:function(){return this.options.filter(function(e){return e.selected}).sort(function(e,t){return e.selected-t.selected})}},{key:"isSelected",value:function(e){e=this.findByTextContent(e.content);return e&&e.selected}},{key:"findByTextContent",value:function(t){return this.options.find(function(e){return e.content===t})}},{key:"findByOptionElement",value:function(t){return this.options.find(function(e){return null===t.value?e.content===t.innerHTML:t.value.startsWith("__new_option__")?null===e.value&&e.content===t.innerHTML:e.value===t.value&&e.content===t.innerHTML})}},{key:"choose",value:function(e){e?this.select(e):this.$navigation.item?this.selectNavigationItem():this.selectInputValue(),this.$event.emit("option_chosen",e)}},{key:"append",value:function(e){if(!e){e=this.options.push(this.getModel())-1;return this.options[e]}}},{key:"getModel",value:function(e){return{value:e?e.value:null,content:e?e.innerHTML:this.$store.input,selected:this.decide(e),timestamp:e&&this.decide(e)?Date.now():null}}},{key:"select",value:function(t){this.options.map(function(e){e.content===t.content&&(e.selected=!0,e.timestamp=Date.now())})}},{key:"unselect",value:function(t){this.options.map(function(e){e.content===t.content&&(e.selected=!1)}),null===t.value&&this.removeAllUnselectedNew(),this.$event.emit("option_unselected"),_classPrivateMethodGet(this,_clean,_clean2).call(this)}},{key:"decide",value:function(e){var t=!1;if(e){if(!e.value&&!e.content)return!1;t=e.selected}return t}},{key:"isNew",value:function(t){return!this.$store.initialData.find(function(e){return compareOptions(e,t)})}},{key:"isListEmpty",get:function(){return!this.selected.length}},{key:"selectNavigationItem",value:function(){"add"===this.$navigation.item?this.selectInputValue():this.select(this.$navigation.item)}},{key:"selectInputValue",value:function(){this.select(this.append())}},{key:"allTaken",get:function(){var e;return!!this.$config.options.limit&&!(this.$app.config.options.limit>(null===(e=this.selected)||void 0===e?void 0:e.length))}},{key:"removeAllUnselectedNew",value:function(){this.options=this.options.filter(function(e){return e.value||e.selected})}}]),n}();function _clean2(){var t=this;this.options=this.options.filter(function(e){return!t.isNew(e)||e.selected})}var Store=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),_defineProperty(_assertThisInitialized(e=t.call(this,e)),"input",null),_defineProperty(_assertThisInitialized(e),"initialData",[]),_defineProperty(_assertThisInitialized(e),"options",new Option(e.$app)),e}return _createClass(n,[{key:"inputIsEmpty",get:function(){var e;return!this.input||(null===(e=this.input)||void 0===e?void 0:e.length)<=0}}]),n}(),NavigationEvents=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e)}return _createClass(n,[{key:"handle",value:function(e){"ArrowDown"===e.key&&(e.preventDefault(),this.arrowDownEvent(e)),"ArrowUp"===e.key&&(e.preventDefault(),this.arrowUpEvent(e))}},{key:"arrowDownEvent",value:function(e){this.isNavigationEnabled(e)&&this.$navigation.down()}},{key:"arrowUpEvent",value:function(e){this.isNavigationEnabled(e)&&this.$navigation.up()}},{key:"isNavigationEnabled",value:function(e){e=this.getWidgetFromEvent(e);return this.$app.widget.resultList.isOpen(e)&&!this.$app.widget.resultList.list.isEmpty(e)}},{key:"getWidgetFromEvent",value:function(e){return e.target.closest(Widget.selector)}}]),n}(),Navigation=function(){_inherits(i,Component);var n=_createSuper(i);function i(e){var t;return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(t=n.call(this,e)),"item",""),t.events=new NavigationEvents(e),t}return _createClass(i,[{key:"up",value:function(){var e,t=this.$app.widget.resultList.list.results;this.selectedItem?(e=t.indexOf(this.selectedItem),"add"===this.selectedItem?this.selectedItem=t[t.length-1]:(e<=t.length-1&&(this.selectedItem=t[e-1]),t[e-1]||(this.$app.resultListVoter.canOpenAll()?this.selectedItem=t[t.length-1]:this.selectedItem="add"))):this.$app.resultListVoter.canOpenAll()?this.selectedItem=t[t.length-1]:this.selectedItem="add",this.$event.emit("navigation_action","up")}},{key:"down",value:function(){var e,t=this.$app.widget.resultList.list.results;this.selectedItem?"add"!==this.selectedItem?(e=t.indexOf(this.selectedItem),t.length>e+1&&(this.selectedItem=t[e+1]),t.length===e+1&&(this.$app.resultListVoter.canOpenAll()?this.selectedItem=t[0]:this.selectedItem="add")):this.selectedItem=t[0]:t.length?this.selectedItem=t[0]:this.selectedItem="add",this.$event.emit("navigation_action","down")}},{key:"clear",value:function(){this.selectedItem=""}},{key:"isActive",value:function(e){return e===this.selectedItem}},{key:"isAddItem",value:function(){return"add"===this.selectedItem}},{key:"selectedItem",get:function(){return this.item},set:function(e){this.item=e}}]),i}(),ResultListVoter=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e,void 0)}return _createClass(n,[{key:"canOpenAll",value:function(){return this.$store.inputIsEmpty&&this.$app.optionVoter.canAdd()}},{key:"canOpen",value:function(){return!this.$store.inputIsEmpty&&this.$app.optionVoter.canAdd()}}]),n}(),OptionVoter=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e,void 0)}return _createClass(n,[{key:"canAdd",value:function(){return!this.$app.store.options.allTaken}}]),n}(),InputVoter=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e)}return _createClass(n,[{key:"shouldFocusOnWidgetClick",value:function(e){return!e.target.classList.contains(classnames.result_list_item)&&(!!this.$config.options.enabled&&!e.target.closest(TagList.selector))}}]),n}(),Choosy=function(){function i(e,t){var n=this;_classCallCheck(this,i),_defineProperty(this,"widget",void 0),_defineProperty(this,"config",void 0),_defineProperty(this,"clickedOutsideOfWidgetEvent",function(e){n.widget.element.contains(e.target)||n.isClickOnTagList(e)||n.event.emit("widget_clicked_outside")}),_defineProperty(this,"windowBlurEvent",function(){n.event.emit("window_blur")}),this.store=new Store(this),this.event=new Event$1,this.widget=new Widget(e,this),this.config=new Config(this,t),this.navigation=new Navigation(this),this.resultListVoter=new ResultListVoter(this),this.optionVoter=new OptionVoter(this),this.inputVoter=new InputVoter(this),(this.widget.initialElement.element.__x=this).initializeData(),this.registerEventListener(),this.resolveOptions(),this.widget.update(!1)}return _createClass(i,[{key:"registerEventListener",value:function(){document.addEventListener("click",this.clickedOutsideOfWidgetEvent),window.addEventListener("blur",this.windowBlurEvent)}},{key:"removeEventListeners",value:function(){document.removeEventListener("click",this.clickedOutsideOfWidgetEvent),window.removeEventListener("blur",this.windowBlurEvent)}},{key:"isClickOnTagList",value:function(e){return!!e.target.closest(TagList.selector)}},{key:"initializeData",value:function(){this.store.options.options=Array.from(this.store.initialData)}},{key:"resolveOptions",value:function(){this.widget.initialElement.isMultiple||(this.config.options.limit=1)}},{key:"disable",value:function(){this.config.options.enabled=!1,this.widget.disable()}},{key:"enable",value:function(){this.config.options.enabled=!0,this.widget.enable()}},{key:"clear",value:function(){this.widget.destroy(),this.removeEventListeners(),this.store=void 0,this.event=void 0,this.config=void 0,this.navigation=void 0,this.resultListVoter=void 0,this.optionVoter=void 0,this.inputVoter=void 0,this.widget.initialElement.element.__x=void 0}}]),i}();export default Choosy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
