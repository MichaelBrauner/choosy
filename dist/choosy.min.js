function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}function _createSuper(n){var i=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,i?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _classStaticPrivateMethodGet(e,t,n){if(e!==t)throw new TypeError("Private static access of wrong provenance");return n}function _classPrivateMethodGet(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var classnames={widget:"choosy-widget",input:"choosy-input",list:"choosy-list",item:"choosy-item",item_text_span:"choosy-item-text-span",remove_button:"choosy-remove-button",remove_button_svg:"choosy-remove-button-svg",result_list_container:"choosy-result-list-container",result_list:"choosy-result-list",result_list_item:"choosy-result-item",result_list_item_active:"active",add_item:"choosy-add-item"},elements={get textInput(){var e=this.create("input","text",[classnames.input]);return e.style.width="1ch",e},get widget(){var e=this.create("div",null,[classnames.widget]);return e.append(this.list),e.append(this.resultList),e},get list(){return this.create("div",null,[classnames.list])},get removeButton(){var e=this.create("button",null,[classnames.remove_button]);return e.append(this.removeSVG),e},get removeSVG(){return(new DOMParser).parseFromString("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill=\"currentColor\" class=\"".concat(classnames.remove_button_svg,"\">\n            <path fill-rule='evenodd'\n                  d='M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z'></path>\n            </svg>"),"text/html").body.firstChild},get resultList(){var e=this.create("div",null,[classnames.result_list_container]);return e.style.display="none",e},get resultListList(){return this.create("ul",null,[classnames.result_list])},get resultItem(){return this.create("li",null,[classnames.result_list_item])},get addItem(){var e=this.resultItem;return e.classList.add(classnames.add_item),e.innerHTML="Add new",e},get selectOption(){return this.create("option",null)},getItem:function(e){var t=this.create("div",null,[classnames.item]);return t.append(this.getItemTextSpan(e)),t.append(this.removeButton),t},getItemTextSpan:function(e){var t=this.create("span",null,[classnames.item_text_span]);return t.innerHTML=e,t},create:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],i=document.createElement(e);return t&&(i.type=t),n.forEach(function(e){i.classList.add(e)}),i}},Component=function e(t){_classCallCheck(this,e),_defineProperty(this,"element",void 0),this.element=t},Event={subscribers:{},on:function(e,t){Array.isArray(this.subscribers[e])||(this.subscribers[e]=[]),this.subscribers[e].push(t)},off:function(e,t){this.subscribers[e]=t?this.subscribers[e].filter(function(e){return e!==t}):[]},emit:function(e,t){Array.isArray(this.subscribers[e])&&this.subscribers[e].forEach(function(e){e(t)})}};function debounce(i,s){var o;return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];clearTimeout(o),o=setTimeout(function(){clearTimeout(o),i.apply(void 0,t)},s)}}function getLastOfArray(e){return e[e.length-1]}function compareOptions(e,t){return e.value===t.value&&e.content===t.content}var OptionVoter={canAdd:function(){return!Option.allTaken}},ResultListVoter={canOpenAll:function(){return Store.inputIsEmpty&&OptionVoter.canAdd()},canOpen:function(){return!Store.inputIsEmpty&&OptionVoter.canAdd()}},_clean=new WeakSet,ResultList=function(){function t(e){_classCallCheck(this,t),_clean.add(this),_defineProperty(this,"element",void 0),_defineProperty(this,"list",void 0),_defineProperty(this,"closeEvents",["widget_clicked_outside","input_pressed_esc","input_pressed_tab","window_blur"]),this.element=e,this.appendList(),this.registerEventListener()}return _createClass(t,[{key:"registerEventListener",value:function(){var t=this;this.closeEvents.forEach(function(e){Event.on(e,function(){t.closeResultBox()})}),Event.on("input_input_debounced",function(){Store.inputIsEmpty?t.closeResultBox():(t.list.createResultList(),t.createBox())}),Event.on("input_focus",function(){t.list.createResultList(),t.createBox()})}},{key:"createBox",value:function(){this.openResultBox(),this.list.setResultBoxHeight()}},{key:"openResultBox",value:function(){this.open||(this.element.style.display="block")}},{key:"open",get:function(){return"none"!==this.element.style.display}},{key:"closeResultBox",value:function(){_classPrivateMethodGet(this,_clean,_clean2).call(this),this.open&&(this.element.style.display="none"),Navigation.clear()}},{key:"appendList",value:function(){this.list=new ResultListList(this.element)}}],[{key:"isOpen",value:function(e){return"block"===e.querySelector(t.selector).style.display}},{key:"selector",get:function(){return".".concat(classnames.result_list_container)}}]),t}(),_clean2=function(){this.list.destroy(),this.appendList()},navigationEvents={handle:function(e){"ArrowDown"===e.key&&(e.preventDefault(),this.arrowDownEvent(e)),"ArrowUp"===e.key&&(e.preventDefault(),this.arrowUpEvent(e))},arrowDownEvent:function(e){this.isNavigationEnabled(e)&&Navigation.down()},arrowUpEvent:function(e){this.isNavigationEnabled(e)&&Navigation.up()},isNavigationEnabled:function(e){e=this.getWidgetFromEvent(e);return ResultList.isOpen(e)&&!ResultListList.isEmpty(e)},getWidgetFromEvent:function(e){return e.target.closest(Widget.selector)}},TextInput=function(){_inherits(i,Component);var n=_createSuper(i);function i(e){var t;return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(t=n.call(this,e)),"resetValue",function(){t.element.value=null}),t.registerListeners(),t}return _createClass(i,[{key:"registerListeners",value:function(){var t=this;this.element.addEventListener("input",function(){t.refreshState(),t.adjustWidth()}),this.element.addEventListener("keydown",function(e){"Enter"===e.key&&t.enterKeyEvent(e),"Escape"===e.key&&t.escapeKeyEvent(e),"Backspace"===e.key&&t.backspaceKeyEvent(e),"Tab"===e.key&&Event.emit("input_pressed_tab"),navigationEvents.handle(e)}),this.element.addEventListener("input",debounce(function(e){Event.emit("input_input_debounced",e)},250)),this.element.addEventListener("focus",function(){Event.emit("input_focus")}),this.element.addEventListener("blur",function(e){Event.emit("input_blur",e)}),Event.on("input_cleared",this.resetValue)}},{key:"adjustWidth",value:function(){this.element.style.width="".concat(i.length?i.length+1:1,"ch")}},{key:"refreshState",value:function(){Store.input=this.element.value}},{key:"limit",value:function(e){OptionVoter.canAdd()||e.preventDefault()}},{key:"enterKeyEvent",value:function(e){e.preventDefault(),(i.hasMinLength||OptionVoter.canAdd())&&Option.choose()}},{key:"escapeKeyEvent",value:function(){Event.emit("input_pressed_esc")}},{key:"backspaceKeyEvent",value:function(e){Store.inputIsEmpty&&!Option.isListEmpty&&(e.preventDefault(),Option.unselect(getLastOfArray(Option.selected)))}},{key:"isFocussed",get:function(){return document.activeElement.classList.contains(classnames.input)}},{key:"focus",value:function(){this.isFocussed||this.element.focus()}},{key:"destroy",value:function(){Event.off("input_cleared",this.resetValue)}}],[{key:"length",get:function(){var e;return null===(e=Store.input)||void 0===e?void 0:e.length}},{key:"hasMinLength",get:function(){return 2<=i.length}},{key:"selector",get:function(){return"."+classnames.input}},{key:"clear",value:function(){Store.input=null,Event.emit("input_cleared")}}]),i}(),_clean$1=new WeakSet,_findOptionElementByDataOption=new WeakSet,ResultListList=function(){function t(e){_classCallCheck(this,t),_findOptionElementByDataOption.add(this),_clean$1.add(this),_defineProperty(this,"element",void 0),this.create(e),this.registerEventListener()}return _createClass(t,[{key:"create",value:function(e){var t=elements.resultListList;e.append(t),this.element=t}},{key:"destroy",value:function(){this.element.remove(),Event.off("navigation_action")}},{key:"createListAndScroll",value:function(){this.createResultList(),this.scrollToView()}},{key:"registerEventListener",value:function(){var e=this;this.chooseListener(),Event.on("navigation_action",function(){e.createListAndScroll()})}},{key:"chooseListener",value:function(){var t=this;this.element.addEventListener("click",function(e){e.target.matches("li.".concat(classnames.result_list_item,":not(.").concat(classnames.add_item,")"))?t.choose(e.target.innerHTML):e.target.matches("li."+classnames.add_item)&&t.choose()})}},{key:"choose",value:function(e){e?Option.choose(Option.findByTextContent(e)):Option.equalToInput||Option.choose()}},{key:"createListResults",value:function(){_classPrivateMethodGet(this,_clean$1,_clean2$1).call(this),this.append(t.results),!Option.equalToInput&&TextInput.hasMinLength&&this.appendAddItemToList()}},{key:"createListAllResults",value:function(){_classPrivateMethodGet(this,_clean$1,_clean2$1).call(this),this.append(Option.all)}},{key:"createResultList",value:function(){ResultListVoter.canOpenAll()&&this.createListAllResults(),ResultListVoter.canOpen()&&this.createListResults()}},{key:"append",value:function(e){var t=this;e.forEach(function(e){t.hasOption(e)||t.appendElementToList(t.createResultItem(e))})}},{key:"hasOption",value:function(t){return Array.from(this.allListItems).find(function(e){return e.textContent===t.textContent})}},{key:"appendAddItemToList",value:function(){var e;this.hasAddNewItem||(e=elements.addItem,Navigation.isAddItem()&&e.classList.add(classnames.result_list_item_active),this.appendElementToList(e))}},{key:"appendElementToList",value:function(e){this.element.append(e)}},{key:"hasAddNewItem",get:function(){return this.element.querySelector("."+classnames.add_item)}},{key:"createResultItem",value:function(e){var t=elements.resultItem;return Navigation.isActive(e)&&t.classList.add(classnames.result_list_item_active),t.innerHTML=e.content,t}},{key:"allListItems",get:function(){return this.element.getElementsByTagName("li")}},{key:"setResultBoxHeight",value:function(){var e=this.allListItems,t=0;if(5<e.length)for(var n=0;n<5;n++)t+=e.item(n).offsetHeight;this.element.style.height=t?t+"px":"auto"}},{key:"scrollToView",value:function(){var e=this.getActiveElement();e&&e.scrollIntoView({block:"nearest",inline:"nearest",behavior:"smooth",boundary:this.element})}},{key:"getActiveElement",value:function(){var e=Navigation.item;return e?_classPrivateMethodGet(this,_findOptionElementByDataOption,_findOptionElementByDataOption2).call(this,e):null}}],[{key:"isEmpty",value:function(e){return!e.querySelectorAll("".concat(t.selector," > .").concat(classnames.result_list_item)).length}},{key:"selector",get:function(){return".".concat(classnames.result_list)}},{key:"results",get:function(){var e;return ResultListVoter.canOpenAll()?null!==(e=Option.all)&&void 0!==e?e:[]:ResultListVoter.canOpen()?TextInput.hasMinLength?Option.startingWithInput:[]:void 0}}]),t}(),_clean2$1=function(){for(var e=this.allListItems,t=0,n=e.length;t!==n;++t)e[0].parentNode.removeChild(e[0])},_findOptionElementByDataOption2=function(t){return"add"===t?this.element.querySelector(".".concat(classnames.add_item)):Array.from(this.allListItems).find(function(e){return(null==e?void 0:e.innerHTML)===(null==t?void 0:t.content)})},Navigation={item:"",up:function(){var e,t=ResultListList.results;this.selectedItem?(e=t.indexOf(this.selectedItem),"add"===this.selectedItem?this.selectedItem=t[t.length-1]:(e<=t.length-1&&(this.selectedItem=t[e-1]),t[e-1]||(ResultListVoter.canOpenAll()?this.selectedItem=t[t.length-1]:this.selectedItem="add"))):ResultListVoter.canOpenAll()?this.selectedItem=t[t.length-1]:this.selectedItem="add",Event.emit("navigation_action","up")},down:function(){var e,t=ResultListList.results;this.selectedItem?"add"!==this.selectedItem?(e=t.indexOf(this.selectedItem),t.length>e+1&&(this.selectedItem=t[e+1]),t.length===e+1&&(ResultListVoter.canOpenAll()?this.selectedItem=t[0]:this.selectedItem="add")):this.selectedItem=t[0]:t.length?this.selectedItem=t[0]:this.selectedItem="add",Event.emit("navigation_action","down")},clear:function(){this.selectedItem=""},isActive:function(e){return e===this.selectedItem},isAddItem:function(){return"add"===this.selectedItem},get selectedItem(){return this.item},set selectedItem(e){this.item=e}},Config={textInput:{limit:null},resultList:{openOnFocus:!0}},Option=function(){function n(){_classCallCheck(this,n),_defineProperty(this,"all",void 0)}return _createClass(n,null,[{key:"all",get:function(){return Store.options.all.filter(function(e){return!!e.content})}},{key:"startingWithInput",get:function(){return n.all.filter(function(e){return e.content.includes(Store.input)&&!e.selected})}},{key:"equalToInput",get:function(){return n.all.find(function(e){return e.content===Store.input})}},{key:"selected",get:function(){return n.all.filter(function(e){return e.selected}).sort(function(e,t){return e.selected-t.selected})}},{key:"findByTextContent",value:function(t){return n.all.find(function(e){return e.content===t})}},{key:"findByOptionElement",value:function(t){return n.all.find(function(e){return(null===t.value||e.value===t.value)&&e.content===t.innerHTML})}},{key:"choose",value:function(e){e?n.select(e):Navigation.item?n.selectNavigationItem():n.selectInputValue(),Event.emit("option_chosen")}},{key:"append",value:function(e){if(!e){e=Store.options.all.push(n.getModel())-1;return Store.options.all[e]}}},{key:"getModel",value:function(e){return{value:e?e.value:null,content:e?e.innerHTML:Store.input,selected:n.decide(e),timestamp:e&&n.decide(e)?Date.now():null}}},{key:"select",value:function(t){Store.options.all.map(function(e){e.content===t.content&&(e.selected=!0,e.timestamp=Date.now)})}},{key:"unselect",value:function(t){Store.options.all.map(function(e){e.content===t.content&&(e.selected=!1)}),Event.emit("option_unselected"),_classStaticPrivateMethodGet(this,n,_clean$2).call(this)}},{key:"decide",value:function(e){var t=!1;if(e){if(!e.value&&!e.content)return!1;t=e.selected}return t}},{key:"isNew",value:function(t){return!Store.initialData.find(function(e){return compareOptions(e,t)})}},{key:"isListEmpty",get:function(){return!n.selected.length}},{key:"selectNavigationItem",value:function(){"add"===Navigation.item?n.selectInputValue():n.select(Navigation.item)}},{key:"selectInputValue",value:function(){n.select(n.append())}},{key:"allTaken",get:function(){var e;return!(Config.textInput.limit>(null===(e=n.selected)||void 0===e?void 0:e.length))}}]),n}(),_clean$2=function(){Store.options.all=Store.options.all.filter(function(e){return!Option.isNew(e)})},Store={input:null,initialData:[],options:new Option,get inputIsEmpty(){var e;return!this.input||(null===(e=this.input)||void 0===e?void 0:e.length)<=0}},InitialElement=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),(e=t.call(this,e)).storeInitialData(),e.hide(),e.registerListeners(),e}return _createClass(n,[{key:"hide",value:function(){this.element.style.display="none"}},{key:"attachWidget",value:function(e){this.element.parentElement.append(e)}},{key:"storeInitialData",value:function(){Store.initialData=Array.from(this.getAllOptions).map(function(e){return Option.getModel(e)})}},{key:"getAllOptions",get:function(){return Array.from(this.element.querySelectorAll("option"))}},{key:"appendOption",value:function(e){var t=elements.selectOption;return t.value="__new_option__",t.innerHTML=e.content,this.element.append(t),t}},{key:"registerListeners",value:function(){var e=this;Event.on("option_chosen",function(){e.update()}),Event.on("option_unselected",function(){e.update()})}},{key:"update",value:function(){this.element.querySelectorAll("option").forEach(function(e){var t;null!==(t=Option.findByOptionElement(e))&&void 0!==t&&t.selected?e.selected="selected":e.selected=!1})}},{key:"isMultiple",get:function(){return this.element.multiple}}]),n}(),TagList=function(){_inherits(n,Component);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),_defineProperty(_assertThisInitialized(e=t.call(this,e)),"textInput",void 0),e.appendTextInput(),e.registerEventListeners(),e}return _createClass(n,[{key:"appendTextInput",value:function(){this.textInput=new TextInput(elements.textInput),this.element.append(this.textInput.element)}},{key:"registerEventListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){t.clickedOnRemoveButton(e.target)&&(e.preventDefault(),Option.unselect(Option.findByTextContent(t.findClickedTag(e).innerHTML)))})}},{key:"clickedOnRemoveButton",value:function(e){return!!e.matches("button."+classnames.remove_button)||(!!e.matches("svg."+classnames.remove_button_svg)||!!e.matches("path"))}},{key:"remove",value:function(){this.textInput.destroy(),this.element.remove()}},{key:"findClickedTag",value:function(e){return e.target.closest("."+classnames.item).querySelector("."+classnames.item_text_span)}}],[{key:"create",value:function(){var t=elements.list;return Option.selected.forEach(function(e){return t.append(elements.getItem(e.content))}),new n(t)}},{key:"selector",get:function(){return"."+classnames.list}}]),n}(),InputVoter={shouldFocusAfterEvent:function(e){return!e.target.classList.contains(classnames.result_list_item)&&!e.target.closest(TagList.selector)}},_focusInput=new WeakSet,Widget=function(){function t(e){_classCallCheck(this,t),_focusInput.add(this),_defineProperty(this,"initialElement",void 0),_defineProperty(this,"element",void 0),_defineProperty(this,"tagList",void 0),_defineProperty(this,"resultList",void 0),_defineProperty(this,"navigation",void 0),_defineProperty(this,"store",Store),this.initialElement=new InitialElement(e),this.element=elements.widget,this.resultList=new ResultList(this.element.querySelector("."+classnames.result_list_container)),this.tagList=new TagList(this.element.querySelector("."+classnames.list)),this.initialElement.attachWidget(this.element),this.navigation=Navigation,this.registerListeners()}return _createClass(t,[{key:"registerListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){InputVoter.shouldFocusAfterEvent(e)&&_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)}),Event.on("option_chosen",function(){t.update(),_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)}),Event.on("option_unselected",function(){t.update(),_classPrivateMethodGet(t,_focusInput,_focusInput2).call(t)})}},{key:"update",value:function(){this.appendNewSelectOptions(),this.updateTagList(),this.closeResultListBox(),this.clearTextInput(),this.limit()}},{key:"appendNewSelectOptions",value:function(){var t=this;Store.options.all.forEach(function(e){Option.isNew(e)&&t.initialElement.appendOption(e)})}},{key:"updateTagList",value:function(){this.tagList.remove(),this.tagList=TagList.create(),this.element.append(this.tagList.element)}},{key:"closeResultListBox",value:function(){this.resultList.closeResultBox()}},{key:"clearTextInput",value:function(){TextInput.clear()}},{key:"limit",value:function(){OptionVoter.canAdd()?this.tagList.textInput.element.maxLength=524288:this.tagList.textInput.element.maxLength=0}}],[{key:"selector",get:function(){return".".concat(classnames.widget)}}]),t}(),_focusInput2=function(){this.tagList.textInput.focus()},Choosy=function(){function t(e){_classCallCheck(this,t),_defineProperty(this,"widget",void 0),_defineProperty(this,"config",void 0),this.widget=new Widget(e),this.config=Config,this.initializeData(),this.registerEventListener(),this.resolveOptions()}return _createClass(t,[{key:"registerEventListener",value:function(){this.clickedOutsideOfWidgetEvent(),this.windowBlurEvent()}},{key:"clickedOutsideOfWidgetEvent",value:function(){var t=this;document.addEventListener("click",function(e){t.widget.element.contains(e.target)||t.isClickOnTagList(e)||Event.emit("widget_clicked_outside")})}},{key:"windowBlurEvent",value:function(){window.addEventListener("blur",function(){Event.emit("window_blur")})}},{key:"isClickOnTagList",value:function(e){return!!e.target.closest(TagList.selector)}},{key:"initializeData",value:function(){Store.options.all=Array.from(Store.initialData)}},{key:"resolveOptions",value:function(){this.widget.initialElement.isMultiple||(Config.textInput.limit=1)}}]),t}();export{Choosy};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
