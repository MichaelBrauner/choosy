!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Choosy={})}(this,function(e){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function l(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(n){var i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=u(n);return e=i?(e=u(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),t=this,!(e=e)||"object"!=typeof e&&"function"!=typeof e?c(t):e}}function d(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function h(e){s(this,h),o(this,"element",void 0),this.element=e}var f={widget:"choosy-widget",input:"choosy-input",list:"choosy-list",item:"choosy-item",item_text_span:"choosy-item-text-span",remove_button:"choosy-remove-button",remove_button_svg:"choosy-remove-button-svg",result_list_container:"choosy-result-list-container",result_list:"choosy-result-list",result_list_item:"choosy-result-item",result_list_item_active:"active",add_item:"choosy-add-item"},p={get textInput(){var e=this.create("input","text",[f.input]);return e.style.width="1ch",e},get widget(){var e=this.create("div",null,[f.widget]);return e.append(this.list),e.append(this.resultList),e},get list(){return this.create("div",null,[f.list])},get removeButton(){var e=this.create("button",null,[f.remove_button]);return e.append(this.removeSVG),e},get removeSVG(){return(new DOMParser).parseFromString("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill=\"currentColor\" class=\"".concat(f.remove_button_svg,"\">\n            <path fill-rule='evenodd'\n                  d='M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z'></path>\n            </svg>"),"text/html").body.firstChild},get resultList(){var e=this.create("div",null,[f.result_list_container]);return e.style.display="none",e},get resultListList(){return this.create("ul",null,[f.result_list])},get resultItem(){return this.create("li",null,[f.result_list_item])},get addItem(){var e=this.resultItem;return e.classList.add(f.add_item),e.innerHTML="Add new",e},get selectOption(){return this.create("option",null)},getItem:function(e){var t=this.create("div",null,[f.item]);return t.append(this.getItemTextSpan(e)),t.append(this.removeButton),t},getItemTextSpan:function(e){var t=this.create("span",null,[f.item_text_span]);return t.innerHTML=e,t},create:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],i=document.createElement(e);return t&&(i.type=t),n.forEach(function(e){i.classList.add(e)}),i}},v={subscribers:{},on:function(e,t){Array.isArray(this.subscribers[e])||(this.subscribers[e]=[]),this.subscribers[e].push(t)},off:function(e,t){this.subscribers[e]=t?this.subscribers[e].filter(function(e){return e!==t}):[]},emit:function(e,t){Array.isArray(this.subscribers[e])&&this.subscribers[e].forEach(function(e){e(t)})}};var m=function(){return!B.allTaken},y=function(){return D.inputIsEmpty&&m()},g=function(){return!D.inputIsEmpty&&m()},k=new WeakSet,_=function(){function t(e){s(this,t),k.add(this),o(this,"element",void 0),o(this,"list",void 0),o(this,"closeEvents",["widget_clicked_outside","input_pressed_esc","input_pressed_tab","window_blur"]),this.element=e,this.appendList(),this.registerEventListener()}return l(t,[{key:"registerEventListener",value:function(){var t=this;this.closeEvents.forEach(function(e){v.on(e,function(){t.closeResultBox()})}),v.on("input_input_debounced",function(){D.inputIsEmpty?t.closeResultBox():(t.list.createResultList(),t.createBox())}),v.on("input_focus",function(){t.list.createResultList(),t.createBox()})}},{key:"createBox",value:function(){this.openResultBox(),this.list.setResultBoxHeight()}},{key:"openResultBox",value:function(){this.open||(this.element.style.display="block")}},{key:"open",get:function(){return"none"!==this.element.style.display}},{key:"closeResultBox",value:function(){d(this,k,L).call(this),this.open&&(this.element.style.display="none"),A.clear()}},{key:"appendList",value:function(){this.list=new x(this.element)}}],[{key:"isOpen",value:function(e){return"block"===e.querySelector(t.selector).style.display}},{key:"selector",get:function(){return".".concat(f.result_list_container)}}]),t}(),L=function(){this.list.destroy(),this.appendList()},w={handle:function(e){"ArrowDown"===e.key&&(e.preventDefault(),this.arrowDownEvent(e)),"ArrowUp"===e.key&&(e.preventDefault(),this.arrowUpEvent(e))},arrowDownEvent:function(e){this.isNavigationEnabled(e)&&A.down()},arrowUpEvent:function(e){this.isNavigationEnabled(e)&&A.up()},isNavigationEnabled:function(e){e=this.getWidgetFromEvent(e);return _.isOpen(e)&&!x.isEmpty(e)},getWidgetFromEvent:function(e){return e.target.closest(j.selector)}},I=function(){r(i,h);var n=a(i);function i(e){var t;return s(this,i),o(c(t=n.call(this,e)),"resetValue",function(){t.element.value=null}),t.registerListeners(),t}return l(i,[{key:"registerListeners",value:function(){var i,s,l,t=this;this.element.addEventListener("input",function(){t.refreshState(),t.adjustWidth()}),this.element.addEventListener("keydown",function(e){"Enter"===e.key&&t.enterKeyEvent(e),"Escape"===e.key&&t.escapeKeyEvent(e),"Backspace"===e.key&&t.backspaceKeyEvent(e),"Tab"===e.key&&v.emit("input_pressed_tab"),w.handle(e)}),this.element.addEventListener("input",(i=function(e){v.emit("input_input_debounced",e)},s=250,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];clearTimeout(l),l=setTimeout(function(){clearTimeout(l),i.apply(void 0,t)},s)})),this.element.addEventListener("focus",function(){v.emit("input_focus")}),this.element.addEventListener("blur",function(e){v.emit("input_blur",e)}),v.on("input_cleared",this.resetValue)}},{key:"adjustWidth",value:function(){this.element.style.width="".concat(i.length?i.length+1:1,"ch")}},{key:"refreshState",value:function(){D.input=this.element.value}},{key:"limit",value:function(e){m()||e.preventDefault()}},{key:"enterKeyEvent",value:function(e){e.preventDefault(),(i.hasMinLength||m())&&B.choose()}},{key:"escapeKeyEvent",value:function(){v.emit("input_pressed_esc")}},{key:"backspaceKeyEvent",value:function(e){D.inputIsEmpty&&!B.isListEmpty&&(e.preventDefault(),B.unselect((e=B.selected)[e.length-1]))}},{key:"isFocussed",get:function(){return document.activeElement.classList.contains(f.input)}},{key:"focus",value:function(){this.isFocussed||this.element.focus()}},{key:"destroy",value:function(){v.off("input_cleared",this.resetValue)}}],[{key:"length",get:function(){var e;return null===(e=D.input)||void 0===e?void 0:e.length}},{key:"hasMinLength",get:function(){return 2<=i.length}},{key:"selector",get:function(){return"."+f.input}},{key:"clear",value:function(){D.input=null,v.emit("input_cleared")}}]),i}(),E=new WeakSet,b=new WeakSet,x=function(){function t(e){s(this,t),b.add(this),E.add(this),o(this,"element",void 0),this.create(e),this.registerEventListener()}return l(t,[{key:"create",value:function(e){var t=p.resultListList;e.append(t),this.element=t}},{key:"destroy",value:function(){this.element.remove(),v.off("navigation_action")}},{key:"createListAndScroll",value:function(){this.createResultList(),this.scrollToView()}},{key:"registerEventListener",value:function(){var e=this;this.chooseListener(),v.on("navigation_action",function(){e.createListAndScroll()})}},{key:"chooseListener",value:function(){var t=this;this.element.addEventListener("click",function(e){e.target.matches("li.".concat(f.result_list_item,":not(.").concat(f.add_item,")"))?t.choose(e.target.innerHTML):e.target.matches("li."+f.add_item)&&t.choose()})}},{key:"choose",value:function(e){e?B.choose(B.findByTextContent(e)):B.equalToInput||B.choose()}},{key:"createListResults",value:function(){d(this,E,T).call(this),this.append(t.results),!B.equalToInput&&I.hasMinLength&&this.appendAddItemToList()}},{key:"createListAllResults",value:function(){d(this,E,T).call(this),this.append(B.all)}},{key:"createResultList",value:function(){y()&&this.createListAllResults(),g()&&this.createListResults()}},{key:"append",value:function(e){var t=this;e.forEach(function(e){t.hasOption(e)||t.appendElementToList(t.createResultItem(e))})}},{key:"hasOption",value:function(t){return Array.from(this.allListItems).find(function(e){return e.textContent===t.textContent})}},{key:"appendAddItemToList",value:function(){var e;this.hasAddNewItem||(e=p.addItem,A.isAddItem()&&e.classList.add(f.result_list_item_active),this.appendElementToList(e))}},{key:"appendElementToList",value:function(e){this.element.append(e)}},{key:"hasAddNewItem",get:function(){return this.element.querySelector("."+f.add_item)}},{key:"createResultItem",value:function(e){var t=p.resultItem;return A.isActive(e)&&t.classList.add(f.result_list_item_active),t.innerHTML=e.content,t}},{key:"allListItems",get:function(){return this.element.getElementsByTagName("li")}},{key:"setResultBoxHeight",value:function(){var e=this.allListItems,t=0;if(5<e.length)for(var n=0;n<5;n++)t+=e.item(n).offsetHeight;this.element.style.height=t?t+"px":"auto"}},{key:"scrollToView",value:function(){var e=this.getActiveElement();e&&e.scrollIntoView({block:"nearest",inline:"nearest",behavior:"smooth",boundary:this.element})}},{key:"getActiveElement",value:function(){var e=A.item;return e?d(this,b,O).call(this,e):null}}],[{key:"isEmpty",value:function(e){return!e.querySelectorAll("".concat(t.selector," > .").concat(f.result_list_item)).length}},{key:"selector",get:function(){return".".concat(f.result_list)}},{key:"results",get:function(){var e;return y()?null!==(e=B.all)&&void 0!==e?e:[]:g()?I.hasMinLength?B.startingWithInput:[]:void 0}}]),t}(),T=function(){for(var e=this.allListItems,t=0,n=e.length;t!==n;++t)e[0].parentNode.removeChild(e[0])},O=function(t){return"add"===t?this.element.querySelector(".".concat(f.add_item)):Array.from(this.allListItems).find(function(e){return(null==e?void 0:e.innerHTML)===(null==t?void 0:t.content)})},A={item:"",up:function(){var e,t=x.results;this.selectedItem?(e=t.indexOf(this.selectedItem),"add"===this.selectedItem?this.selectedItem=t[t.length-1]:(e<=t.length-1&&(this.selectedItem=t[e-1]),t[e-1]||(y()?this.selectedItem=t[t.length-1]:this.selectedItem="add"))):y()?this.selectedItem=t[t.length-1]:this.selectedItem="add",v.emit("navigation_action","up")},down:function(){var e,t=x.results;this.selectedItem?"add"!==this.selectedItem?(e=t.indexOf(this.selectedItem),t.length>e+1&&(this.selectedItem=t[e+1]),t.length===e+1&&(y()?this.selectedItem=t[0]:this.selectedItem="add")):this.selectedItem=t[0]:t.length?this.selectedItem=t[0]:this.selectedItem="add",v.emit("navigation_action","down")},clear:function(){this.selectedItem=""},isActive:function(e){return e===this.selectedItem},isAddItem:function(){return"add"===this.selectedItem},get selectedItem(){return this.item},set selectedItem(e){this.item=e}},R={textInput:{limit:null},resultList:{openOnFocus:!0}},B=function(){function n(){s(this,n),o(this,"all",void 0)}return l(n,null,[{key:"all",get:function(){return D.options.all.filter(function(e){return!!e.content})}},{key:"startingWithInput",get:function(){return n.all.filter(function(e){return e.content.includes(D.input)&&!e.selected})}},{key:"equalToInput",get:function(){return n.all.find(function(e){return e.content===D.input})}},{key:"selected",get:function(){return n.all.filter(function(e){return e.selected}).sort(function(e,t){return e.selected-t.selected})}},{key:"findByTextContent",value:function(t){return n.all.find(function(e){return e.content===t})}},{key:"findByOptionElement",value:function(t){return n.all.find(function(e){return(null===t.value||e.value===t.value)&&e.content===t.innerHTML})}},{key:"choose",value:function(e){e?n.select(e):A.item?n.selectNavigationItem():n.selectInputValue(),v.emit("option_chosen")}},{key:"append",value:function(e){if(!e){e=D.options.all.push(n.getModel())-1;return D.options.all[e]}}},{key:"getModel",value:function(e){return{value:e?e.value:null,content:e?e.innerHTML:D.input,selected:n.decide(e),timestamp:e&&n.decide(e)?Date.now():null}}},{key:"select",value:function(t){D.options.all.map(function(e){e.content===t.content&&(e.selected=!0,e.timestamp=Date.now)})}},{key:"unselect",value:function(t){D.options.all.map(function(e){e.content===t.content&&(e.selected=!1)}),v.emit("option_unselected"),function(e,t,n){if(e!==t)throw new TypeError("Private static access of wrong provenance");return n}(this,n,S).call(this)}},{key:"decide",value:function(e){var t=!1;if(e){if(!e.value&&!e.content)return!1;t=e.selected}return t}},{key:"isNew",value:function(n){return!D.initialData.find(function(e){return t=n,(e=e).value===t.value&&e.content===t.content;var t})}},{key:"isListEmpty",get:function(){return!n.selected.length}},{key:"selectNavigationItem",value:function(){"add"===A.item?n.selectInputValue():n.select(A.item)}},{key:"selectInputValue",value:function(){n.select(n.append())}},{key:"allTaken",get:function(){var e;return!(R.textInput.limit>(null===(e=n.selected)||void 0===e?void 0:e.length))}}]),n}(),S=function(){D.options.all=D.options.all.filter(function(e){return!B.isNew(e)})},D={input:null,initialData:[],options:new B,get inputIsEmpty(){var e;return!this.input||(null===(e=this.input)||void 0===e?void 0:e.length)<=0}},M=function(){r(n,h);var t=a(n);function n(e){return s(this,n),(e=t.call(this,e)).storeInitialData(),e.hide(),e.registerListeners(),e}return l(n,[{key:"hide",value:function(){this.element.style.display="none"}},{key:"attachWidget",value:function(e){this.element.parentElement.append(e)}},{key:"storeInitialData",value:function(){D.initialData=Array.from(this.getAllOptions).map(function(e){return B.getModel(e)})}},{key:"getAllOptions",get:function(){return Array.from(this.element.querySelectorAll("option"))}},{key:"appendOption",value:function(e){var t=p.selectOption;return t.value="__new_option__",t.innerHTML=e.content,this.element.append(t),t}},{key:"registerListeners",value:function(){var e=this;v.on("option_chosen",function(){e.update()}),v.on("option_unselected",function(){e.update()})}},{key:"update",value:function(){this.element.querySelectorAll("option").forEach(function(e){var t;null!==(t=B.findByOptionElement(e))&&void 0!==t&&t.selected?e.selected="selected":e.selected=!1})}},{key:"isMultiple",get:function(){return this.element.multiple}}]),n}(),C=function(){r(n,h);var t=a(n);function n(e){return s(this,n),o(c(e=t.call(this,e)),"textInput",void 0),e.appendTextInput(),e.registerEventListeners(),e}return l(n,[{key:"appendTextInput",value:function(){this.textInput=new I(p.textInput),this.element.append(this.textInput.element)}},{key:"registerEventListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){t.clickedOnRemoveButton(e.target)&&(e.preventDefault(),B.unselect(B.findByTextContent(t.findClickedTag(e).innerHTML)))})}},{key:"clickedOnRemoveButton",value:function(e){return!!e.matches("button."+f.remove_button)||(!!e.matches("svg."+f.remove_button_svg)||!!e.matches("path"))}},{key:"remove",value:function(){this.textInput.destroy(),this.element.remove()}},{key:"findClickedTag",value:function(e){return e.target.closest("."+f.item).querySelector("."+f.item_text_span)}}],[{key:"create",value:function(){var t=p.list;return B.selected.forEach(function(e){return t.append(p.getItem(e.content))}),new n(t)}},{key:"selector",get:function(){return"."+f.list}}]),n}(),N=function(e){return!e.target.classList.contains(f.result_list_item)&&!e.target.closest(C.selector)},W=new WeakSet,j=function(){function t(e){s(this,t),W.add(this),o(this,"initialElement",void 0),o(this,"element",void 0),o(this,"tagList",void 0),o(this,"resultList",void 0),o(this,"navigation",void 0),o(this,"store",D),this.initialElement=new M(e),this.element=p.widget,this.resultList=new _(this.element.querySelector("."+f.result_list_container)),this.tagList=new C(this.element.querySelector("."+f.list)),this.initialElement.attachWidget(this.element),this.navigation=A,this.registerListeners()}return l(t,[{key:"registerListeners",value:function(){var t=this;this.element.addEventListener("click",function(e){N(e)&&d(t,W,q).call(t)}),v.on("option_chosen",function(){t.update(),d(t,W,q).call(t)}),v.on("option_unselected",function(){t.update(),d(t,W,q).call(t)})}},{key:"update",value:function(){this.appendNewSelectOptions(),this.updateTagList(),this.closeResultListBox(),this.clearTextInput(),this.limit()}},{key:"appendNewSelectOptions",value:function(){var t=this;D.options.all.forEach(function(e){B.isNew(e)&&t.initialElement.appendOption(e)})}},{key:"updateTagList",value:function(){this.tagList.remove(),this.tagList=C.create(),this.element.append(this.tagList.element)}},{key:"closeResultListBox",value:function(){this.resultList.closeResultBox()}},{key:"clearTextInput",value:function(){I.clear()}},{key:"limit",value:function(){m()?this.tagList.textInput.element.maxLength=524288:this.tagList.textInput.element.maxLength=0}}],[{key:"selector",get:function(){return".".concat(f.widget)}}]),t}(),q=function(){this.tagList.textInput.focus()};e.Choosy=function(){function t(e){s(this,t),o(this,"widget",void 0),o(this,"config",void 0),this.widget=new j(e),this.config=R,this.initializeData(),this.registerEventListener(),this.resolveOptions()}return l(t,[{key:"registerEventListener",value:function(){this.clickedOutsideOfWidgetEvent(),this.windowBlurEvent()}},{key:"clickedOutsideOfWidgetEvent",value:function(){var t=this;document.addEventListener("click",function(e){t.widget.element.contains(e.target)||t.isClickOnTagList(e)||v.emit("widget_clicked_outside")})}},{key:"windowBlurEvent",value:function(){window.addEventListener("blur",function(){v.emit("window_blur")})}},{key:"isClickOnTagList",value:function(e){return!!e.target.closest(C.selector)}},{key:"initializeData",value:function(){D.options.all=Array.from(D.initialData)}},{key:"resolveOptions",value:function(){this.widget.initialElement.isMultiple||(R.textInput.limit=1)}}]),t}(),Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
