/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function debounce(func, wait) {
    let timeout;
    return function (...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
function getLastOfArray(array) {
    return array[array.length - 1];
}
function compareOptions(firstOption, secondOption) {
    return (firstOption.value === secondOption.value) && (firstOption.content === secondOption.content);
}
function merge(obj, ...sources) {
    for (let source of sources) {
        for (let key in source) {
            if (source[key] == null)
                continue;
            obj[key] = replaceValue(obj[key], source[key]);
        }
    }
    return obj;
}
function replaceValue(value, newValue) {
    if (Array.isArray(value) && Array.isArray(newValue)) {
        return newValue.map((val, i) => replaceValue(value[i], val));
    }
    if (isObject(value) && isObject(newValue)) {
        return merge(value, newValue);
    }
    return newValue;
}
function isObject(obj) {
    return obj && obj.constructor === Object;
}

class Component {
    constructor(app, element) {
        this.$app = app;
        this.element = element;
    }
    get $store() {
        return this.$app.store;
    }
    get $navigation() {
        return this.$app.navigation;
    }
    get $event() {
        return this.$app.event;
    }
    get $option() {
        return this.$app.store.options;
    }
    get $textInput() {
        return this.$app.widget.tagList.textInput;
    }
    get $widget() {
        return this.$app.widget;
    }
    get $config() {
        return this.$app.config;
    }
}

class OptionModel {
    constructor(value = undefined, content = undefined, selected = undefined, timestamp = undefined) {
        this.value = value;
        this.content = content;
        this.selected = selected;
        this.timestamp = timestamp;
        this.selected === undefined && (this.selected = this.decide());
        this.timestamp === undefined && (this.timestamp = this.decide() ? Date.now() : null);
    }
    static get Addition() {
        return new OptionModel('add');
    }
    isAddition() {
        return this.value === 'add' && this.isStateIndicator();
    }
    isBlanc() {
        return this.value === undefined && this.isStateIndicator();
    }
    isStateIndicator() {
        return this.content === undefined
            && this.selected === undefined
            && this.timestamp === undefined;
    }
    decide() {
        if (!this.value && !this.content)
            return false;
        return this.selected;
    }
}

var _Option_instances, _Option_clean;
class Option extends Component {
    constructor() {
        super(...arguments);
        _Option_instances.add(this);
    }
    get all() {
        return this.options.filter(option => {
            return !!option.content;
        });
    }
    get allButSelected() {
        return this.options.filter(option => {
            return !!option.content && !this.isSelected(option);
        });
    }
    get startingWithInput() {
        return this.options.filter(option => option.content.includes(this.$store.input) && !option.selected);
    }
    get equalToInput() {
        return this.options.find(option => option.content === this.$store.input);
    }
    get selected() {
        return this.options
            .filter(option => option.selected)
            .sort((a, b) => a.timestamp - b.timestamp);
    }
    isSelected(option) {
        const item = this.findByTextContent(option.content);
        return item && item.selected;
    }
    findByTextContent(value) {
        return this.options.find(option => option.content === value);
    }
    findByOptionElement(optionElement) {
        return this.options.find(option => {
            if (optionElement.value === null)
                return option.content === optionElement.innerHTML;
            if (optionElement.value.startsWith('__new_option__')) {
                return option.value === null && option.content === optionElement.innerHTML;
            }
            return option.value === optionElement.value && option.content === optionElement.innerHTML;
        });
    }
    choose(option = undefined) {
        if (option) {
            this.select(option);
        }
        else {
            if (this.$navigation.item) {
                this.selectNavigationItem();
            }
            else {
                this.selectInputValue();
            }
        }
        this.$event.emit('option_chosen', option);
    }
    append(option = undefined) {
        if (option) {
            return null;
        }
        const storeIndex = this.options.push(this.getModel()) - 1;
        return this.options[storeIndex];
    }
    getModel(option = undefined) {
        var _a;
        return new OptionModel(option === null || option === void 0 ? void 0 : option.value, (_a = option === null || option === void 0 ? void 0 : option.innerHTML) !== null && _a !== void 0 ? _a : this.$store.input);
    }
    select(option) {
        this.options.map(item => {
            if (item.content !== option.content)
                return;
            item.selected = true;
            item.timestamp = Date.now();
        });
    }
    unselect(option) {
        this.options.map(item => {
            if (item.content !== option.content)
                return;
            item.selected = false;
        });
        if (option.value === null) {
            this.removeAllUnselectedNew();
        }
        this.$event.emit('option_unselected');
        __classPrivateFieldGet(this, _Option_instances, "m", _Option_clean).call(this);
    }
    isNew(option) {
        return !this.$store.initialData.find(item => compareOptions(item, option));
    }
    get isListEmpty() {
        return !this.selected.length;
    }
    selectNavigationItem() {
        if (this.$navigation.item.isAddition()) {
            this.selectInputValue();
            return;
        }
        this.select(this.$navigation.item);
    }
    selectInputValue() {
        this.select(this.append());
    }
    get allTaken() {
        var _a;
        if (!this.$config.options.limit)
            return false;
        return !(this.$app.config.options.limit > ((_a = this.selected) === null || _a === void 0 ? void 0 : _a.length));
    }
    removeAllUnselectedNew() {
        this.options = this.options.filter(item => item.value || item.selected);
    }
}
_Option_instances = new WeakSet(), _Option_clean = function _Option_clean() {
    this.options = this.options.filter(item => {
        return !this.isNew(item) || item.selected;
    });
};

class Store extends Component {
    constructor(app) {
        super(app);
        this.input = null;
        this.initialData = [];
        this.options = new Option(this.$app);
    }
    get inputIsEmpty() {
        var _a;
        if (!this.input)
            return true;
        return ((_a = this.input) === null || _a === void 0 ? void 0 : _a.length) <= 0;
    }
}

class Config extends Component {
    /**
     * @param {Choosy} app
     * @param options
     */
    constructor(app, options) {
        super(app, undefined);
        /**
         * @type {{openOnFocus: boolean, limit: null|number, enabled: boolean}}
         * @default
         */
        this.options = {
            enabled: true,
            limit: null,
            openOnFocus: true
        };
        if (options) {
            this.options = merge(this.options, options);
        }
    }
    resolveEnabled() {
        if (this.options.enabled)
            this.$widget.enable();
        if (!this.options.enabled)
            this.$widget.disable();
    }
}

var classnames = {
    widget: 'choosy-widget',
    input: 'choosy-input',
    list: 'choosy-list',
    item: 'choosy-item',
    item_text_span: 'choosy-item-text-span',
    remove_button: 'choosy-remove-button',
    remove_button_svg: 'choosy-remove-button-svg',
    result_list_container: 'choosy-result-list-container',
    result_list: 'choosy-result-list',
    result_list_item: 'choosy-result-item',
    result_list_item_active: 'active',
    add_item: 'choosy-add-item'
};

var elements = {
    get textInput() {
        const input = this.create('input', 'text', [classnames.input]);
        input.style.width = '1ch';
        return input;
    },
    get widget() {
        const widget = this.create('div', null, [classnames.widget]);
        widget.append(this.list);
        widget.append(this.resultList);
        return widget;
    },
    get list() {
        return this.create('div', null, [classnames.list]);
    },
    get removeButton() {
        const btn = this.create('button', null, [classnames.remove_button]);
        btn.append(this.removeSVG);
        return btn;
    },
    get removeSVG() {
        const svg = new DOMParser().parseFromString(`<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill="currentColor" class="${classnames.remove_button_svg}">
            <path fill-rule='evenodd'
                  d='M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z'></path>
            </svg>`, 'text/html');
        return svg.body.firstChild;
    },
    get resultList() {
        const wrapper = this.create('div', null, [classnames.result_list_container]);
        wrapper.style.display = 'none';
        return wrapper;
    },
    get resultListList() {
        return this.create('ul', null, [classnames.result_list]);
    },
    get resultItem() {
        return this.create('li', null, [classnames.result_list_item]);
    },
    get addItem() {
        const item = this.resultItem;
        item.classList.add(classnames.add_item);
        item.innerHTML = 'Add new';
        return item;
    },
    get selectOption() {
        return this.create('option', null);
    },
    getItem(text) {
        const item = this.create('div', null, [classnames.item]);
        item.append(this.getItemTextSpan(text));
        item.append(this.removeButton);
        return item;
    },
    getItemTextSpan(text) {
        const span = this.create('span', null, [classnames.item_text_span]);
        span.innerHTML = text;
        return span;
    },
    create(tagName, type = null, classes = []) {
        const element = document.createElement(tagName);
        if (type)
            element.type = type;
        classes.forEach((name) => {
            element.classList.add(name);
        });
        return element;
    }
};

class InitialElement extends Component {
    constructor(app, element) {
        super(app, element);
        this.storeInitialData();
        this.hide();
        this.registerListeners();
    }
    hide() {
        this.element.style.display = 'none';
    }
    attachWidget(widget) {
        this.element.parentElement.append(widget);
    }
    storeInitialData() {
        this.$app.store.initialData = Array.from(this.getAllOptions)
            .map(option => this.$store.options.getModel(option));
    }
    get getAllOptions() {
        return Array.from(this.element.querySelectorAll('option'));
    }
    appendOption(option) {
        const newOptionEl = elements.selectOption;
        newOptionEl.value = '__new_option__' + option.content;
        newOptionEl.innerHTML = option.content;
        this.element.append(newOptionEl);
        return newOptionEl;
    }
    registerListeners() {
        this.$event.on('option_chosen', () => {
            this.update();
        });
        this.$event.on('option_unselected', () => {
            this.update();
        });
    }
    update(triggerChangeEvent = true) {
        this.element.querySelectorAll('option').forEach(option => {
            var _a;
            if ((_a = this.$store.options.findByOptionElement(option)) === null || _a === void 0 ? void 0 : _a.selected) {
                option.selected = true;
                return;
            }
            option.selected = false;
        });
        if (triggerChangeEvent) {
            this.triggerChangeEvent();
        }
    }
    triggerChangeEvent() {
        this.element.dispatchEvent(new Event('change'));
    }
    get isMultiple() {
        return this.element.multiple;
    }
    updateOptionsData() {
        this.storeInitialData();
        this.$option.options = Array.from(this.getAllOptions)
            .map(option => this.$store.options.getModel(option));
        this.$widget.update(false);
    }
    clean() {
        this.getAllOptions.forEach(element => {
            if (this.isOptionNew(element) && !this.isSelected(element)) {
                element.remove();
            }
        });
    }
    isOptionNew(element) {
        return element.value.startsWith('__new_option__');
    }
    isSelected(element) {
        return !!this.$option.selected.find(option => {
            return element.textContent === option.content;
        });
    }
    isOptionCreated(option) {
        return this.getAllOptions.find((select) => {
            return option.content === this.extractNewOptionsValue(select);
        });
    }
    extractNewOptionsValue(selectOption) {
        if (this.isOptionNew(selectOption)) {
            const value = selectOption.value;
            return value.replace('__new_option__', '');
        }
        return undefined;
    }
}

var _ResultListList_instances, _ResultListList_clean, _ResultListList_findOptionElementByDataOption;
class ResultListList extends Component {
    constructor(app, resultBox) {
        super(app);
        _ResultListList_instances.add(this);
        this.create(resultBox);
        this.registerEventListener();
    }
    create(resultBox) {
        const list = elements.resultListList;
        resultBox.append(list);
        this.element = list;
    }
    destroy() {
        this.element.remove();
        this.$event.off('navigation_action');
    }
    createListAndScroll() {
        this.createResultList();
        this.scrollToView();
    }
    registerEventListener() {
        this.chooseListener();
        this.$event.on('navigation_action', () => {
            this.createListAndScroll();
        });
    }
    chooseListener() {
        this.element.addEventListener('click', event => {
            const target = event.target;
            if (target.matches(`li.${classnames.result_list_item}:not(.${classnames.add_item})`)) {
                this.choose(target.innerHTML);
                return;
            }
            if (target.matches('li.' + classnames.add_item)) {
                this.choose();
            }
        });
    }
    choose(value = undefined) {
        if (value) {
            this.$option.choose(this.$option.findByTextContent(value));
            return;
        }
        !this.$option.equalToInput && this.$option.choose();
    }
    createListResults() {
        __classPrivateFieldGet(this, _ResultListList_instances, "m", _ResultListList_clean).call(this);
        this.append(this.results);
        if (!this.$option.equalToInput && this.$textInput.hasMinLength)
            this.appendAddItemToList();
    }
    createListAllResults() {
        __classPrivateFieldGet(this, _ResultListList_instances, "m", _ResultListList_clean).call(this);
        this.append(this.$option.allButSelected);
    }
    createResultList() {
        if (this.$app.resultListVoter.canOpenAll())
            this.createListAllResults();
        if (this.$app.resultListVoter.canOpen())
            this.createListResults();
    }
    append(options) {
        options.forEach(option => {
            if (this.hasOption(option))
                return;
            this.appendElementToList(this.createResultItem(option));
        });
    }
    hasOption(option) {
        return Array.from(this.allListItems)
            .find(result => result.textContent === option.content);
    }
    appendAddItemToList() {
        if (!this.hasAddNewItem) {
            const element = elements.addItem;
            if (this.$navigation.selectedItem.isAddition())
                element.classList.add(classnames.result_list_item_active);
            this.appendElementToList(element);
        }
    }
    appendElementToList(element) {
        this.element.append(element);
    }
    get hasAddNewItem() {
        return this.element.querySelector('.' + classnames.add_item);
    }
    createResultItem(option) {
        const item = elements.resultItem;
        if (this.$navigation.isActive(option))
            item.classList.add(classnames.result_list_item_active);
        item.innerHTML = option.content;
        return item;
    }
    isEmpty(widget) {
        return !widget.querySelectorAll(`${ResultListList.selector} > .${classnames.result_list_item}`).length;
    }
    static get selector() {
        return `.${classnames.result_list}`;
    }
    get allListItems() {
        return this.element.getElementsByTagName('li');
    }
    get results() {
        var _a;
        if (this.$app.resultListVoter.canOpenAll())
            return (_a = this.$option.all) !== null && _a !== void 0 ? _a : [];
        if (this.$app.resultListVoter.canOpen())
            return this.$textInput.hasMinLength ? this.$option.startingWithInput : [];
        return [];
    }
    setResultBoxHeight() {
        const items = this.allListItems;
        const totalItems = items.length;
        let result = 0;
        if (totalItems > 5) {
            for (let i = 0; i < 5; i++) {
                result += items.item(i).offsetHeight;
            }
        }
        this.element.style.height = result ? result + 'px' : 'auto';
    }
    scrollToView() {
        const activeElement = this.getActiveElement();
        if (activeElement)
            activeElement.scrollIntoView({
                block: 'nearest',
                inline: 'nearest',
                behavior: 'smooth'
            });
    }
    getActiveElement() {
        const option = this.$navigation.item;
        if (!option)
            return null;
        return __classPrivateFieldGet(this, _ResultListList_instances, "m", _ResultListList_findOptionElementByDataOption).call(this, option);
    }
}
_ResultListList_instances = new WeakSet(), _ResultListList_clean = function _ResultListList_clean() {
    const nodes = this.allListItems;
    for (let i = 0, len = nodes.length; i !== len; ++i) {
        nodes[0].parentNode.removeChild(nodes[0]);
    }
}, _ResultListList_findOptionElementByDataOption = function _ResultListList_findOptionElementByDataOption(option) {
    if (option.isAddition())
        return this.element.querySelector(`.${classnames.add_item}`);
    return Array.from(this.allListItems).find(optionElement => {
        return (optionElement === null || optionElement === void 0 ? void 0 : optionElement.innerHTML) === (option === null || option === void 0 ? void 0 : option.content);
    });
};

var _ResultList_instances, _ResultList_clean;
/**
 * @extends Component
 */
class ResultList extends Component {
    /**
     *
     * @param element
     * @param {Choosy} app
     */
    constructor(element, app) {
        super(app, element);
        _ResultList_instances.add(this);
        this.closeEvents = [
            'widget_clicked_outside',
            'input_pressed_esc',
            'input_pressed_tab',
            'window_blur'
        ];
        this.appendList();
        this.registerEventListener();
    }
    registerEventListener() {
        this.closeEvents.forEach(eventName => {
            this.$event.on(eventName, () => {
                this.closeResultBox();
            });
        });
        this.$event.on('input_input_debounced', () => {
            if (this.$store.inputIsEmpty) {
                this.closeResultBox();
                return;
            }
            this.list.createResultList();
            this.createBox();
        });
        this.$event.on('input_focus', () => {
            this.list.createResultList();
            this.createBox();
        });
    }
    createBox() {
        this.openResultBox();
        this.list.setResultBoxHeight();
    }
    openResultBox() {
        if (!this.open) {
            this.element.style.display = 'block';
        }
    }
    get open() {
        return this.element.style.display !== 'none';
    }
    closeResultBox() {
        __classPrivateFieldGet(this, _ResultList_instances, "m", _ResultList_clean).call(this);
        if (this.open)
            this.element.style.display = 'none';
        this.$navigation.clear();
    }
    appendList() {
        this.list = new ResultListList(this.$app, this.element);
    }
    isOpen(widget) {
        return widget.querySelector(ResultList.selector).style.display === 'block';
    }
    static get selector() {
        return `.${classnames.result_list_container}`;
    }
    destroy() {
        this.list.destroy();
    }
}
_ResultList_instances = new WeakSet(), _ResultList_clean = function _ResultList_clean() {
    this.destroy();
    this.appendList();
};

class TextInput extends Component {
    constructor(app, element) {
        super(app, element);
        this.registerListeners();
    }
    registerListeners() {
        this.element.addEventListener('input', () => {
            this.refreshState();
            this.adjustWidth();
        });
        this.element.addEventListener('keydown', event => {
            if (event.key === 'Enter') {
                this.enterKeyEvent(event);
            }
            if (event.key === 'Escape') {
                this.escapeKeyEvent();
            }
            if (event.key === 'Backspace') {
                this.backspaceKeyEvent(event);
            }
            if (event.key === 'Tab') {
                this.$event.emit('input_pressed_tab');
            }
            this.$navigation.events.handle(event);
        });
        this.element.addEventListener('input', debounce(event => {
            this.$event.emit('input_input_debounced', event);
        }, 250));
        this.element.addEventListener('focus', () => {
            this.$event.emit('input_focus');
        });
        this.element.addEventListener('blur', (event) => {
            this.$event.emit('input_blur', event);
        });
        this.$event.on('input_cleared', this.resetValue);
    }
    get length() {
        var _a;
        return (_a = this.$store.input) === null || _a === void 0 ? void 0 : _a.length;
    }
    get hasMinLength() {
        return this.length >= 2;
    }
    adjustWidth() {
        this.element.style.width = `${this.length ? this.length + 1 : 1}ch`;
    }
    refreshState() {
        this.$store.input = this.element.value;
    }
    limit(event) {
        if (!this.$app.optionVoter.canAdd())
            event.preventDefault();
    }
    static get selector() {
        return '.' + classnames.input;
    }
    clear() {
        this.$store.input = null;
        this.$event.emit('input_cleared');
    }
    enterKeyEvent(event) {
        event.preventDefault();
        if (this.hasMinLength || this.$app.optionVoter.canAdd())
            this.$option.choose();
    }
    escapeKeyEvent() {
        this.$event.emit('input_pressed_esc');
    }
    backspaceKeyEvent(event) {
        if (!this.$store.inputIsEmpty || this.$option.isListEmpty)
            return;
        event.preventDefault();
        this.$option.unselect(getLastOfArray(this.$option.selected));
    }
    get isFocussed() {
        return document.activeElement.classList.contains(classnames.input);
    }
    focus() {
        if (!this.isFocussed)
            this.element.focus();
    }
    resetValue() {
        if (this)
            this.element.value = null;
    }
    destroy() {
        this.$event.off('input_cleared', this.resetValue);
    }
}

class TagList extends Component {
    constructor(app, element) {
        super(app, element);
        this.appendTextInput();
        this.registerEventListeners();
    }
    appendTextInput() {
        this.textInput = new TextInput(this.$app, elements.textInput);
        this.element.append(this.textInput.element);
    }
    registerEventListeners() {
        this.element.addEventListener('click', event => {
            if (this.clickedOnRemoveButton(event.target)) {
                event.preventDefault();
                this.$option.unselect(this.$option.findByTextContent(this.findClickedTag(event).innerHTML));
            }
        });
    }
    clickedOnRemoveButton(target) {
        if (target.matches('button.' + classnames.remove_button))
            return true;
        if (target.matches('svg.' + classnames.remove_button_svg))
            return true;
        return !!target.matches('path');
    }
    static create(options, app) {
        const list = elements.list;
        options.selected.forEach(item => list.append(elements.getItem(item.content)));
        return new TagList(app, list);
    }
    remove() {
        this.textInput.destroy();
        this.element.remove();
    }
    findClickedTag(event) {
        return event.target.closest('.' + classnames.item)
            .querySelector('.' + classnames.item_text_span);
    }
    static get selector() {
        return '.' + classnames.list;
    }
}

var _Widget_instances, _Widget_focusInput;
class Widget extends Component {
    constructor(element, app) {
        super(app, elements.widget);
        _Widget_instances.add(this);
        this.initialElement = new InitialElement(app, element);
        this.resultList = new ResultList(this.element.querySelector('.' + classnames.result_list_container), app);
        this.tagList = new TagList(app, this.element.querySelector('.' + classnames.list));
        this.initialElement.attachWidget(this.element);
        this.registerListeners();
    }
    registerListeners() {
        this.element.addEventListener('click', (event) => {
            this.$app.inputVoter.shouldFocusOnWidgetClick(event) && __classPrivateFieldGet(this, _Widget_instances, "m", _Widget_focusInput).call(this);
        });
        this.$event.on('option_chosen', () => {
            this.update(false);
            __classPrivateFieldGet(this, _Widget_instances, "m", _Widget_focusInput).call(this);
        });
        this.$event.on('option_unselected', () => {
            this.update(false);
            __classPrivateFieldGet(this, _Widget_instances, "m", _Widget_focusInput).call(this);
        });
    }
    update(triggerChangeEvent) {
        this.appendNewSelectOptions();
        this.initialElement.update(triggerChangeEvent);
        this.updateTagList();
        this.closeResultListBox();
        this.clearTextInput();
        this.limit();
        this.updateConfigOptions();
    }
    appendNewSelectOptions() {
        this.$option.all.forEach(option => {
            if (this.$option.isNew(option) && !this.initialElement.isOptionCreated(option)) {
                this.initialElement.appendOption(option);
            }
        });
        this.initialElement.clean();
    }
    updateTagList() {
        this.tagList.remove();
        this.tagList = TagList.create(this.$option, this.$app);
        this.element.append(this.tagList.element);
    }
    closeResultListBox() {
        this.resultList.closeResultBox();
    }
    clearTextInput() {
        this.tagList.textInput.clear();
    }
    static get selector() {
        return `.${classnames.widget}`;
    }
    limit() {
        if (!this.$app.optionVoter.canAdd()) {
            this.tagList.textInput.element.maxLength = 0;
        }
        else {
            this.tagList.textInput.element.maxLength = 524288;
        }
    }
    updateConfigOptions() {
        this.$config.resolveEnabled();
    }
    disable() {
        this.element.classList.add('disabled');
        this.tagList.textInput.element.tabIndex = -1;
    }
    enable() {
        this.element.classList.remove('disabled');
        this.tagList.textInput.element.tabIndex = 0;
    }
    destroy() {
        this.tagList.remove();
        this.resultList.destroy();
        this.element.remove();
    }
}
_Widget_instances = new WeakSet(), _Widget_focusInput = function _Widget_focusInput() {
    this.tagList.textInput.focus();
};

class NavigationEvents extends Component {
    handle(event) {
        if (event.key === 'ArrowDown') {
            event.preventDefault();
            this.arrowDownEvent(event);
        }
        if (event.key === 'ArrowUp') {
            event.preventDefault();
            this.arrowUpEvent(event);
        }
    }
    arrowDownEvent(event) {
        if (this.isNavigationEnabled(event))
            this.$navigation.down();
    }
    arrowUpEvent(event) {
        if (this.isNavigationEnabled(event))
            this.$navigation.up();
    }
    isNavigationEnabled(event) {
        const widget = this.getWidgetFromEvent(event);
        return this.$app.widget.resultList.isOpen(widget) && !this.$app.widget.resultList.list.isEmpty(widget);
    }
    getWidgetFromEvent(event) {
        return event.target.closest(Widget.selector);
    }
}

class Navigation extends Component {
    constructor(app) {
        super(app);
        this.item = new OptionModel();
        this.events = new NavigationEvents(app);
    }
    up() {
        const results = this.$app.widget.resultList.list.results;
        if (this.selectedItem.isBlanc()) {
            if (!this.$app.resultListVoter.canOpenAll()) {
                this.switchToAdd();
            }
            else {
                this.selectedItem = results[results.length - 1];
            }
        }
        else {
            const index = results.indexOf(this.selectedItem);
            if (this.selectedItem.isAddition()) {
                this.selectedItem = results[results.length - 1];
            }
            else {
                if (index <= results.length - 1) {
                    this.selectedItem = results[index - 1];
                }
                if (!results[index - 1]) {
                    if (!this.$app.resultListVoter.canOpenAll()) {
                        this.switchToAdd();
                    }
                    else {
                        this.selectedItem = results[results.length - 1];
                    }
                }
            }
        }
        this.$event.emit('navigation_action', 'up');
    }
    down() {
        const results = this.$app.widget.resultList.list.results;
        if (!this.selectedItem) {
            if (!results.length) {
                this.selectedItem = OptionModel.Addition;
            }
            else {
                this.selectedItem = results[0];
            }
        }
        else {
            if (this.selectedItem.isAddition()) {
                const index = results.indexOf(this.selectedItem);
                if (results.length > index + 1) {
                    this.selectedItem = results[index + 1];
                }
                if (results.length === index + 1) {
                    if (!this.$app.resultListVoter.canOpenAll()) {
                        this.selectedItem = OptionModel.Addition;
                    }
                    else {
                        this.selectedItem = results[0];
                    }
                }
            }
            else {
                this.selectedItem = results[0];
            }
        }
        this.$event.emit('navigation_action', 'down');
    }
    clear() {
        this.selectedItem = new OptionModel();
    }
    isActive(option) {
        return option === this.selectedItem;
    }
    get selectedItem() {
        return this.item;
    }
    set selectedItem(item) {
        this.item = item;
    }
    switchToAdd() {
        this.selectedItem = OptionModel.Addition;
    }
}

class ResultListVoter extends Component {
    canOpenAll() {
        return this.$store.inputIsEmpty && this.$app.optionVoter.canAdd();
    }
    canOpen() {
        return !this.$store.inputIsEmpty && this.$app.optionVoter.canAdd();
    }
}

class OptionVoter extends Component {
    constructor(app) {
        super(app, undefined);
    }
    canAdd() {
        return !this.$app.store.options.allTaken;
    }
}

class InputVoter extends Component {
    constructor(app) {
        super(app);
    }
    shouldFocusOnWidgetClick(event) {
        if (event.target.classList.contains(classnames.result_list_item))
            return false;
        if (!this.$config.options.enabled)
            return false;
        return !event.target.closest(TagList.selector);
    }
}

class AppEvent {
    constructor() {
        this.subscribers = {};
    }
    on(eventName, callback) {
        if (!Array.isArray((this.subscribers)[eventName])) {
            (this.subscribers)[eventName] = [];
        }
        (this.subscribers)[eventName].push(callback);
    }
    off(eventName, callback = undefined) {
        if (callback) {
            (this.subscribers)[eventName] = this.subscribers[eventName].filter(event => event !== callback);
            return;
        }
        (this.subscribers)[eventName] = [];
    }
    emit(eventName, data = undefined) {
        if (!Array.isArray(this.subscribers[eventName])) {
            return;
        }
        (this.subscribers)[eventName].forEach((callback) => {
            callback(data);
        });
    }
}

class Choosy {
    constructor(element, config) {
        this.clickedOutsideOfWidgetEvent = (event) => {
            if (this.widget.element.contains(event.target) || this.isClickOnTagList(event))
                return;
            this.event.emit('widget_clicked_outside');
        };
        this.windowBlurEvent = () => {
            this.event.emit('window_blur');
        };
        if (!element)
            return;
        this.store = new Store(this);
        this.event = new AppEvent();
        this.widget = new Widget(element, this);
        this.config = new Config(this, config);
        this.navigation = new Navigation(this);
        this.resultListVoter = new ResultListVoter(this);
        this.optionVoter = new OptionVoter(this);
        this.inputVoter = new InputVoter(this);
        this.widget.initialElement.element.__x = this;
        this.initializeData();
        this.registerEventListener();
        this.resolveOptions();
        this.widget.update(false);
    }
    registerEventListener() {
        document.addEventListener('click', this.clickedOutsideOfWidgetEvent);
        window.addEventListener('blur', this.windowBlurEvent);
    }
    removeEventListeners() {
        document.removeEventListener('click', this.clickedOutsideOfWidgetEvent);
        window.removeEventListener('blur', this.windowBlurEvent);
    }
    isClickOnTagList(event) {
        return !!event.target.closest(TagList.selector);
    }
    initializeData() {
        this.store.options.options = Array.from(this.store.initialData);
    }
    resolveOptions() {
        if (!this.widget.initialElement.isMultiple)
            this.config.options.limit = 1;
    }
    disable() {
        this.config.options.enabled = false;
        this.widget.disable();
    }
    enable() {
        this.config.options.enabled = true;
        this.widget.enable();
    }
    clear() {
        this.widget.destroy();
        this.removeEventListeners();
        this.store = undefined;
        this.event = undefined;
        this.config = undefined;
        this.navigation = undefined;
        this.resultListVoter = undefined;
        this.optionVoter = undefined;
        this.inputVoter = undefined;
        this.widget.initialElement.element.__x = undefined;
    }
}

export default Choosy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
